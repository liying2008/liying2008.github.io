<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>duduhuo&#39;s Blog</title>
  <subtitle>To be better.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2017-05-14T08:26:31.142Z</updated>
  <id>/</id>
  
  <author>
    <name>独毒火</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SmartisanDialog - 锤子风格的对话框</title>
    <link href="/2017/05/14/SmartisanDialog%20-%20%E9%94%A4%E5%AD%90%E9%A3%8E%E6%A0%BC%E7%9A%84%E5%AF%B9%E8%AF%9D%E6%A1%86/"/>
    <id>/2017/05/14/SmartisanDialog - 锤子风格的对话框/</id>
    <published>2017-05-13T16:00:00.000Z</published>
    <updated>2017-05-14T08:26:31.142Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Github地址"><a href="#Github地址" class="headerlink" title="Github地址"></a>Github地址</h2><p><a href="https://github.com/liying2008/SmartisanDialog" target="_blank" rel="external">https://github.com/liying2008/SmartisanDialog</a></p>
<blockquote>
<p><a href="https://raw.githubusercontent.com/liying2008/SmartisanDialog/master/app/app-debug.apk" target="_blank" rel="external">Download Demo Apk</a></p>
</blockquote>
<h2 id="屏幕截图-Screenshots"><a href="#屏幕截图-Screenshots" class="headerlink" title="屏幕截图 (Screenshots)"></a>屏幕截图 (Screenshots)</h2><p><img src="http://upload-images.jianshu.io/upload_images/2883714-355dc76c6a508ff7.gif" alt="Dialog展示"></p>
<h2 id="下载-Download"><a href="#下载-Download" class="headerlink" title="下载 (Download)"></a>下载 (Download)</h2><h3 id="Use-Gradle"><a href="#Use-Gradle" class="headerlink" title="Use Gradle"></a>Use Gradle</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'cc.duduhuo.dialog:smartisan-dialog:1.0.0'</span></div></pre></td></tr></table></figure>
<h3 id="Or-Maven"><a href="#Or-Maven" class="headerlink" title="Or Maven"></a>Or Maven</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cc.duduhuo.dialog<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>smartisan-dialog<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="使用-Usage"><a href="#使用-Usage" class="headerlink" title="使用 (Usage)"></a>使用 (Usage)</h2><ul>
<li>显示普通Dialog</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> NormalDialog dialog = SmartisanDialog.createNormalDialog(<span class="keyword">this</span>);</div><div class="line">dialog.setTitle(<span class="string">"这是标题"</span>)</div><div class="line">    .setMsg(<span class="string">"对话框信息"</span>)</div><div class="line">    .setMsgGravity(Gravity.CENTER)</div><div class="line">    .setLeftBtnText(<span class="string">"确定"</span>)   <span class="comment">// 设置文本的按钮会显示，不设置文本则不显示</span></div><div class="line">    .setRightBtnText(<span class="string">"取消"</span>)</div><div class="line">    .show();</div><div class="line"><span class="comment">// 设置点击监听（下同，不再解释）</span></div><div class="line">dialog.setOnSelectListener(<span class="keyword">new</span> NormalDialog.OnSelectListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLeftSelect</span><span class="params">()</span> </span>&#123;</div><div class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"onLeftSelect"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">        dialog.dismiss();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRightSelect</span><span class="params">()</span> </span>&#123;</div><div class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"onRightSelect"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">        dialog.dismiss();</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>显示带两个选项的Dialog</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> TwoOptionsDialog dialog = SmartisanDialog.createTwoOptionsDialog(<span class="keyword">this</span>);</div><div class="line">dialog.setTitle(<span class="string">"选择一个选项"</span>)</div><div class="line">    .setOp1Text(<span class="string">"第一个选项"</span>)   <span class="comment">// 设置第一个选项的文本</span></div><div class="line">    .setOp2Text(<span class="string">"第二个选项"</span>)   <span class="comment">// 设置第二个选项的文本</span></div><div class="line">    .show();</div><div class="line">dialog.setOnSelectListener(<span class="keyword">new</span> TwoOptionsDialog.OnSelectListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOp1</span><span class="params">()</span> </span>&#123;</div><div class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"onOp1"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">        dialog.dismiss();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOp2</span><span class="params">()</span> </span>&#123;</div><div class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"onOp2"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">        dialog.dismiss();</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>显示带三个选项的Dialog</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> ThreeOptionsDialog dialog = SmartisanDialog.createThreeOptionsDialog(<span class="keyword">this</span>);</div><div class="line">dialog.setOp1Text(<span class="string">"选项1"</span>)</div><div class="line">    .setOp2Text(<span class="string">"选项2"</span>)</div><div class="line">    .setOp3Text(<span class="string">"选项3"</span>)</div><div class="line">    .show();</div><div class="line">dialog.setOnSelectListener(<span class="keyword">new</span> ThreeOptionsDialog.OnSelectListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOp1</span><span class="params">()</span> </span>&#123;</div><div class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"onOp1"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">        dialog.dismiss();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOp2</span><span class="params">()</span> </span>&#123;</div><div class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"onOp2"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">        dialog.dismiss();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOp3</span><span class="params">()</span> </span>&#123;</div><div class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"onOp3"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">        dialog.dismiss();</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>显示警告Dialog</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> WarningDialog dialog = SmartisanDialog.createWarningDialog(<span class="keyword">this</span>);</div><div class="line">dialog.setTitle(<span class="string">"确定退出登录吗"</span>)</div><div class="line">    .setConfirmText(<span class="string">"退出登录"</span>)</div><div class="line">    .show();</div><div class="line">dialog.setOnConfirmListener(<span class="keyword">new</span> WarningDialog.OnConfirmListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConfirm</span><span class="params">()</span> </span>&#123;</div><div class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"onConfirm"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">        dialog.dismiss();</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>显示选项列表Dialog</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; options = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">6</span>);</div><div class="line">options.add(<span class="string">"选项1"</span>);</div><div class="line">options.add(<span class="string">"选项2"</span>);</div><div class="line">options.add(<span class="string">"选项3"</span>);</div><div class="line">options.add(<span class="string">"选项4"</span>);</div><div class="line">options.add(<span class="string">"选项5"</span>);</div><div class="line">options.add(<span class="string">"选项6"</span>);</div><div class="line"><span class="keyword">final</span> OptionListDialog dialog = SmartisanDialog.createOptionListDialog(<span class="keyword">this</span>);</div><div class="line">dialog.setTitle(<span class="string">"请选择一个选项"</span>)</div><div class="line">    .setOptionList(options)</div><div class="line">    .setLastOption(<span class="string">"选项5"</span>)   <span class="comment">// 上次选择的选项</span></div><div class="line">    .setItemGravity(Gravity.CENTER) <span class="comment">// Item是居左、居中还是居右</span></div><div class="line">    .setLastColor(<span class="number">0xFF40B64A</span>)   <span class="comment">// 上次选择的选项显示的颜色，用于区分</span></div><div class="line">    .show();</div><div class="line"><span class="comment">// setOnOptionItemSelectListener()方法必须在show()方法之后调用，否则无效</span></div><div class="line">dialog.setOnOptionItemSelectListener(<span class="keyword">new</span> OnOptionItemSelectListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSelect</span><span class="params">(<span class="keyword">int</span> position, CharSequence option)</span> </span>&#123;</div><div class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"position = "</span> + position + <span class="string">", option = "</span> + option, Toast.LENGTH_SHORT).show();</div><div class="line">        dialog.dismiss();</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>可以自定义Dialog的内容视图</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> CustomizedDialog dialog = SmartisanDialog.createCustomizedDialog(<span class="keyword">this</span>);</div><div class="line">View rootView = getLayoutInflater().inflate(R.layout.test_view, <span class="keyword">null</span>);</div><div class="line">dialog.addView(rootView)</div><div class="line">    .setTitle(<span class="string">"自定义内容视图"</span>)</div><div class="line">    .setLeftBtnText(<span class="string">"按钮1"</span>)  <span class="comment">// 设置文本的按钮会显示，不设置文本则不显示</span></div><div class="line">    .setRightBtnText(<span class="string">"按钮2"</span>)</div><div class="line">    .show();</div><div class="line">dialog.setOnSelectListener(<span class="keyword">new</span> CustomizedDialog.OnSelectListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLeftSelect</span><span class="params">()</span> </span>&#123;</div><div class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"onLeftSelect"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">        dialog.dismiss();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRightSelect</span><span class="params">()</span> </span>&#123;</div><div class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"onRightSelect"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">        dialog.dismiss();</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="样式预览-Style-Preview"><a href="#样式预览-Style-Preview" class="headerlink" title="样式预览 (Style Preview)"></a>样式预览 (Style Preview)</h2><table>
<thead>
<tr>
<th style="text-align:center">样式</th>
<th style="text-align:center">预览</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">NormalDialog</td>
<td style="text-align:center"><img src="http://upload-images.jianshu.io/upload_images/2883714-fd1424e3b0e9235a.png" alt="NormalDialog"></td>
</tr>
<tr>
<td style="text-align:center">TwoOptionsDialog</td>
<td style="text-align:center"><img src="http://upload-images.jianshu.io/upload_images/2883714-c40676b2860db19e.png" alt="TwoOptionsDialog"></td>
</tr>
<tr>
<td style="text-align:center">ThreeOptionsDialog</td>
<td style="text-align:center"><img src="http://upload-images.jianshu.io/upload_images/2883714-40ba786c41cbe182.png" alt="ThreeOptionsDialog"></td>
</tr>
<tr>
<td style="text-align:center">WarningDialog</td>
<td style="text-align:center"><img src="http://upload-images.jianshu.io/upload_images/2883714-2886f728134c90f1.png" alt="WarningDialog"></td>
</tr>
<tr>
<td style="text-align:center">OptionListDialog</td>
<td style="text-align:center"><img src="http://upload-images.jianshu.io/upload_images/2883714-0e2b68dc051190f7.png" alt="OptionListDialog"></td>
</tr>
<tr>
<td style="text-align:center">CustomizedDialog</td>
<td style="text-align:center"><img src="http://upload-images.jianshu.io/upload_images/2883714-a6877b4d893562c6.png" alt="CustomizedDialog"></td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Github地址&quot;&gt;&lt;a href=&quot;#Github地址&quot; class=&quot;headerlink&quot; title=&quot;Github地址&quot;&gt;&lt;/a&gt;Github地址&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/liying2008/Smartis
    
    </summary>
    
      <category term="我的开源" scheme="/categories/%E6%88%91%E7%9A%84%E5%BC%80%E6%BA%90/"/>
    
    
      <category term="Android" scheme="/tags/Android/"/>
    
      <category term="Dialog" scheme="/tags/Dialog/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio配置Kotlin开发环境的最简单方式</title>
    <link href="/2017/05/11/Android%20Studio%E9%85%8D%E7%BD%AEKotlin%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E6%9C%80%E7%AE%80%E5%8D%95%E6%96%B9%E5%BC%8F/"/>
    <id>/2017/05/11/Android Studio配置Kotlin开发环境的最简单方式/</id>
    <published>2017-05-10T16:00:00.000Z</published>
    <updated>2017-05-12T14:41:42.414Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一步：安装Kotlin插件"><a href="#第一步：安装Kotlin插件" class="headerlink" title="第一步：安装Kotlin插件"></a>第一步：安装Kotlin插件</h1><p>打开Settings面板，找到Plugins选项，点击Browse repositories(浏览仓库)，输入“Kotlin”查找，然后安装即可。安装完成之后需要重启Android Studio (切记！)。</p>
<p>安装完成之后如下图所示。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2883714-ef663d09c5a2145b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="安装Kotlin插件"></p>
<p>插件当前的最新版本是<code>1.1.2-release-Studio-2.3-3</code>。</p>
<h1 id="第二步：配置Kotlin开发环境"><a href="#第二步：配置Kotlin开发环境" class="headerlink" title="第二步：配置Kotlin开发环境"></a>第二步：配置Kotlin开发环境</h1><p>点击菜单栏的“Tools”选项，选择“Kotlin”，然后选择“Configure Kotlin in Project”。如下图所示。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2883714-c0e26b64474d952d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置Kotlin开发环境"></p>
<p>在弹出的窗口中选择<strong>需要使用Kotlin的模块</strong>和<strong>Kotlin编译器和运行时的版本</strong>，如下图所示。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2883714-66381e59a50da4b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="选择模块和Kotlin版本"></p>
<p>点击“OK”之后，Kotlin插件会自动开始配置。配置完成之后，同步一下工程（Sync Project）即可。</p>
<blockquote>
<p>[可选]：在菜单栏中点击“<em>Code</em>”菜单项，选择“<em>Convert Java File to Kotlin File</em>”即可根据之前配置将已有的Java文件转换为Kotlin文件。</p>
</blockquote>
<h1 id="附：推荐配置"><a href="#附：推荐配置" class="headerlink" title="附：推荐配置"></a>附：推荐配置</h1><blockquote>
<p>打开模块下的<code>build.gradle</code>文件，在<code>apply plugin: ‘kotlin-android’</code>下面加入一行：<code>apply plugin: ‘kotlin-android-extensions’</code>。这是一个Kotlin的扩展模块，可以让Activity自动关联xml布局中的View而不需要<code>findViewById</code>。<br>详情请参考：<a href="http://kotlinlang.org/docs/tutorials/android-plugin.html" target="_blank" rel="external">http://kotlinlang.org/docs/tutorials/android-plugin.html</a></p>
</blockquote>
<h1 id="附：使用Kotlin编写单元测试"><a href="#附：使用Kotlin编写单元测试" class="headerlink" title="附：使用Kotlin编写单元测试"></a>附：使用Kotlin编写单元测试</h1><p>在Android开发中免不了要进行各种单元测试，使用Kotlin编写单元测试可以简化代码，提高效率。<br>将工程切换到Project视图，展开模块下的src目录，这个目录下默认会有三个文件夹。main文件夹通常用来存放模块代码；androidTest文件夹通常用来存放Android相关的单元测试；test文件夹通常用来存放Java（Kotlin）相关的单元测试。</p>
<h2 id="Kotlin的单元测试"><a href="#Kotlin的单元测试" class="headerlink" title="Kotlin的单元测试"></a>Kotlin的单元测试</h2><p>在测试包下新建一个Kotlin Class，例如命名为UnitTest1。在这个类中可以编写多个测试方法，不详细叙述。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cc.duduhuo.kotlintest</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.junit.Test</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.junit.Assert.*</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnitTest1</span> </span>&#123;</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">addition_isCorrect</span><span class="params">()</span></span> &#123;</div><div class="line">        assertEquals(<span class="number">4</span>, (<span class="number">2</span> + <span class="number">2</span>).toLong())</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Android的单元测试"><a href="#Android的单元测试" class="headerlink" title="Android的单元测试"></a>Android的单元测试</h2><p>在测试包下新建一个Kotlin Class，例如命名为AndroidTest1。在这个类中可以编写多个测试方法，不详细叙述。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cc.duduhuo.kotlintest</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.support.test.InstrumentationRegistry</div><div class="line"><span class="keyword">import</span> android.support.test.runner.AndroidJUnit4</div><div class="line"><span class="keyword">import</span> org.junit.Assert.assertEquals</div><div class="line"><span class="keyword">import</span> org.junit.Test</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith</div><div class="line"></div><div class="line"><span class="meta">@RunWith(AndroidJUnit4::class)</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AndroidTest1</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">useAppContext</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="comment">// Context of the app under test.</span></div><div class="line">        <span class="keyword">val</span> appContext = InstrumentationRegistry.getTargetContext()</div><div class="line"></div><div class="line">        assertEquals(<span class="string">"cc.duduhuo.kotlintest"</span>, appContext.packageName)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="附：有关Kotlin的一些有用资料"><a href="#附：有关Kotlin的一些有用资料" class="headerlink" title="附：有关Kotlin的一些有用资料"></a>附：有关Kotlin的一些有用资料</h1><ol>
<li>Kotlin官网：<a href="http://kotlinlang.org/" target="_blank" rel="external">http://kotlinlang.org/</a>  </li>
<li>Kotlin用户手册（英文）：<a href="http://kotlinlang.org/docs/reference/" target="_blank" rel="external">http://kotlinlang.org/docs/reference/</a>  </li>
<li>Kotin开源地址：<a href="https://github.com/JetBrains/kotlin" target="_blank" rel="external">https://github.com/JetBrains/kotlin</a>  </li>
<li>官方介绍如何开始使用Kotlin：<a href="http://kotlinlang.org/docs/tutorials/getting-started.html" target="_blank" rel="external">http://kotlinlang.org/docs/tutorials/getting-started.html</a>  </li>
<li>与Kotlin相关一些库、框架和应用：<a href="http://kotlinlang.org/docs/resources.html" target="_blank" rel="external">http://kotlinlang.org/docs/resources.html</a>  </li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第一步：安装Kotlin插件&quot;&gt;&lt;a href=&quot;#第一步：安装Kotlin插件&quot; class=&quot;headerlink&quot; title=&quot;第一步：安装Kotlin插件&quot;&gt;&lt;/a&gt;第一步：安装Kotlin插件&lt;/h1&gt;&lt;p&gt;打开Settings面板，找到Plugins
    
    </summary>
    
      <category term="Kotlin" scheme="/categories/Kotlin/"/>
    
    
      <category term="Android" scheme="/tags/Android/"/>
    
      <category term="Kotlin" scheme="/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>使用Nexus私服代理其他maven仓库(jitpack、jcenter)</title>
    <link href="/2017/03/24/%E4%BD%BF%E7%94%A8Nexus%E7%A7%81%E6%9C%8D%E4%BB%A3%E7%90%86%E5%85%B6%E4%BB%96maven%E4%BB%93%E5%BA%93(jitpack%E3%80%81jcenter)/"/>
    <id>/2017/03/24/使用Nexus私服代理其他maven仓库(jitpack、jcenter)/</id>
    <published>2017-03-23T16:00:00.000Z</published>
    <updated>2017-05-12T09:06:00.220Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nexus下载及运行"><a href="#Nexus下载及运行" class="headerlink" title="Nexus下载及运行"></a>Nexus下载及运行</h1><p>Nexus3下载地址：<a href="https://support.sonatype.com/hc/en-us/articles/218637467-Download-Nexus-Repository-Manager-3" target="_blank" rel="external">https://support.sonatype.com/hc/en-us/articles/218637467-Download-Nexus-Repository-Manager-3</a><br>Nexus3使用文档：<a href="http://books.sonatype.com/nexus-book/reference3/" target="_blank" rel="external">http://books.sonatype.com/nexus-book/reference3/</a>  </p>
<blockquote>
<p>从Nexus Repository Manager 3.1.0-04开始，Nexus不再提供各平台的二进制安装文件。</p>
</blockquote>
<p><strong>下面以Windows平台为例：</strong></p>
<p>下载Nexus压缩包解压之后，进入bin目录，在命令提示符中运行<code>nexus.exe /run</code>即可启动nexus服务。按<code>Ctrl + C</code>可关闭Nexus。</p>
<h3 id="（可选）安装为Windows服务："><a href="#（可选）安装为Windows服务：" class="headerlink" title="（可选）安装为Windows服务："></a>（可选）安装为Windows服务：</h3><p>以管理员身份打开命令提示符，同样进入bin目录下，运行：<code>nexus.exe /install</code>，即可将nexus安装为系统服务，然后在Windows服务管理窗口设置为开机启动即可。<br>如果想删除nexus服务，同样在bin目录下，以管理员身份打开命令提示符并运行<code>nexus.exe /uninstall</code>。</p>
<h3 id="（可选）添加环境变量："><a href="#（可选）添加环境变量：" class="headerlink" title="（可选）添加环境变量："></a>（可选）添加环境变量：</h3><p>将Nexus的bin目录加入系统PATH变量中，以后就可以在任意目录中执行<code>nexus.exe /run</code>命令了。</p>
<h1 id="使用Nexus代理其他仓库"><a href="#使用Nexus代理其他仓库" class="headerlink" title="使用Nexus代理其他仓库"></a>使用Nexus代理其他仓库</h1><p>打开Nexus管理面板。如果Nexus安装在本机，则默认地址是<code><a href="http://127.0.0.1:8081/" target="_blank" rel="external">http://127.0.0.1:8081/</a></code>。然后使用管理员帐户登录系统，管理员帐户的默认用户名和密码是：<code>admin</code>和<code>admin123</code>，进入系统之后可以创建其他用户，不再赘述。</p>
<p>首先需要按如下步骤创建一个仓库：</p>
<p><img src="http://img.blog.csdn.net/20170324151310072" alt="创建仓库"></p>
<p>选择仓库类型为：maven2 (proxy)，进入仓库配置。</p>
<p><strong>jitpack仓库配置如下图所示：</strong></p>
<p><img src="http://img.blog.csdn.net/20170324151729828" alt="jitpack仓库配置"></p>
<p><strong>jcenter仓库配置如下图所示：</strong></p>
<p><img src="http://img.blog.csdn.net/20170324151935221" alt="jcenter仓库配置"></p>
<blockquote>
<p>jitpack仓库URL：<a href="https://jitpack.io" target="_blank" rel="external">https://jitpack.io</a><br>jcenter仓库URL：<a href="http://jcenter.bintray.com/" target="_blank" rel="external">http://jcenter.bintray.com/</a>  </p>
</blockquote>
<h1 id="让Android-Studio使用本地Nexus私服"><a href="#让Android-Studio使用本地Nexus私服" class="headerlink" title="让Android Studio使用本地Nexus私服"></a>让Android Studio使用本地Nexus私服</h1><p>首先在<code>maven-public</code>仓库中将上一步添加的代理仓库加入，如下图所示：</p>
<p><img src="http://img.blog.csdn.net/20170324152721658" alt="maven-public配置"></p>
<p>之后打开Android Studio项目，在Project的<code>build.gradle</code>中将原本的<code>allprojects</code>闭包改为：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">allprojects</span> &#123;</div><div class="line">    <span class="keyword">repositories</span> &#123;</div><div class="line">        maven &#123; url <span class="string">"http://localhost:8081/repository/maven-public/"</span> &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>之后Sync Project或Make Project即可。</p>
<h3 id="查看仓库内容"><a href="#查看仓库内容" class="headerlink" title="查看仓库内容"></a>查看仓库内容</h3><p>如图所示，在Components下可以浏览所有仓库中的内容。</p>
<p><img src="http://img.blog.csdn.net/20170324153606322" alt="查看仓库内容"></p>
<p>下图是我jcenter仓库中的内容：</p>
<p><img src="http://img.blog.csdn.net/20170324154030789" alt="我的jcenter仓库中的内容"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Nexus下载及运行&quot;&gt;&lt;a href=&quot;#Nexus下载及运行&quot; class=&quot;headerlink&quot; title=&quot;Nexus下载及运行&quot;&gt;&lt;/a&gt;Nexus下载及运行&lt;/h1&gt;&lt;p&gt;Nexus3下载地址：&lt;a href=&quot;https://support.so
    
    </summary>
    
      <category term="相关技能" scheme="/categories/%E7%9B%B8%E5%85%B3%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="Android" scheme="/tags/Android/"/>
    
      <category term="Nexus" scheme="/tags/Nexus/"/>
    
      <category term="Maven" scheme="/tags/Maven/"/>
    
      <category term="jitpack" scheme="/tags/jitpack/"/>
    
      <category term="jcenter" scheme="/tags/jcenter/"/>
    
  </entry>
  
  <entry>
    <title>PermissionsDispatcher使用详解</title>
    <link href="/2016/12/27/PermissionsDispatcher%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/"/>
    <id>/2016/12/27/PermissionsDispatcher使用详解/</id>
    <published>2016-12-26T16:00:00.000Z</published>
    <updated>2017-05-12T09:04:46.507Z</updated>
    
    <content type="html"><![CDATA[<p>PermissionsDispatcher是一个基于注解、帮助开发者简单处理Android 6.0系统中的运行时权限的开源库。避免了开发者编写大量繁琐的样板代码。</p>
<p><strong>开源地址：<a href="https://github.com/hotchemi/PermissionsDispatcher" target="_blank" rel="external">https://github.com/hotchemi/PermissionsDispatcher</a></strong></p>
<p><strong>文档介绍：<a href="http://hotchemi.github.io/PermissionsDispatcher/" target="_blank" rel="external">http://hotchemi.github.io/PermissionsDispatcher/</a></strong></p>
<p>下面详细介绍一下如何在Android Studio上使用该开源库。</p>
<h1 id="1、添加依赖"><a href="#1、添加依赖" class="headerlink" title="1、添加依赖"></a>1、添加依赖</h1><p>首先在项目工程下的<code>build.gradle</code>文件中加入对maven仓库依赖引入的支持。</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">allprojects</span> &#123;</div><div class="line">    <span class="keyword">repositories</span> &#123;</div><div class="line">        jcenter()</div><div class="line">        mavenCentral()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>之后在module下的<code>build.gradle</code>文件中添加两项依赖：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'com.github.hotchemi:permissionsdispatcher:2.3.1'</span></div><div class="line">annotationProcessor <span class="string">'com.github.hotchemi:permissionsdispatcher-processor:2.3.1'</span></div></pre></td></tr></table></figure>
<p>并将<code>targetSdkVersion</code>设为23，即：<code>targetSdkVersion 23</code></p>
<h1 id="2、在Activity或Fragment中使用"><a href="#2、在Activity或Fragment中使用" class="headerlink" title="2、在Activity或Fragment中使用"></a>2、在Activity或Fragment中使用</h1><p>注解列表：</p>
<table>
<thead>
<tr>
<th>Annotation</th>
<th>Required</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@RuntimePermissions</code></td>
<td><strong>✓</strong></td>
<td>注解在其内部需要使用运行时权限的Activity或Fragment上</td>
</tr>
<tr>
<td><code>@NeedsPermission</code></td>
<td><strong>✓</strong></td>
<td>注解在需要调用运行时权限的方法上，当用户给予权限时会执行该方法</td>
</tr>
<tr>
<td><code>@OnShowRationale</code></td>
<td></td>
<td>注解在用于向用户解释为什么需要调用该权限的方法上，只有当第一次请求权限被用户拒绝，下次请求权限之前会调用</td>
</tr>
<tr>
<td><code>@OnPermissionDenied</code></td>
<td></td>
<td>注解在当用户拒绝了权限请求时需要调用的方法上</td>
</tr>
<tr>
<td><code>@OnNeverAskAgain</code></td>
<td></td>
<td>注解在当用户选中了授权窗口中的<strong><em>不再询问</em></strong>复选框后并拒绝了权限请求时需要调用的方法，一般可以向用户解释为何申请此权限，并根据实际需求决定是否再次弹出权限请求对话框</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>注意：被注解的方法不能是私有方法。</strong></p>
</blockquote>
<p>只有<code>@RuntimePermissions</code>和<code>@NeedsPermission</code>是必须的，其余注解均为可选。当使用了<code>@RuntimePermissions</code>和<code>@NeedsPermission</code>之后，需要点击菜单栏中<code>Build</code>菜单下的<code>Make Project</code>，或者按快捷键<code>Ctrl + F9</code>编译整个项目，编译器会在<code>app\build\intermediates\classes\debug</code>目录下与被注解的Activity同一个包下生成一个辅助类，名称为<code>被注解的Activity名称+PermissionsDispatcher.class</code>，如图所示：</p>
<p><img src="http://img.blog.csdn.net/20161227201859240" alt="生成的辅助类"></p>
<p>接下来可以调用辅助类里面的方法完成应用的权限请求了。</p>
<p>在需要调用权限的位置调用辅助类里面的<code>xxxWithCheck</code>方法，<code>xxx</code>是被<code>@NeedsPermission</code>注解的方法名。如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MainActivityPermissionsDispatcher.showCameraWithCheck(<span class="keyword">this</span>);</div></pre></td></tr></table></figure>
<p>之后，还需要重写该Activity的<code>onRequestPermissionsResult()</code>方法，其方法内调用辅助类的<code>onRequestPermissionsResult()</code>方法，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, @NonNull String[] permissions, @NonNull <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</div><div class="line">    <span class="comment">// <span class="doctag">NOTE:</span> delegate the permission handling to generated method</span></div><div class="line">    MainActivityPermissionsDispatcher.onRequestPermissionsResult(<span class="keyword">this</span>, requestCode, grantResults);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>完整的<code>MainActivity</code>如下所示。</p>
<ul>
<li>MainActivity.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RuntimePermissions</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        findViewById(R.id.button_camera).setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        findViewById(R.id.button_contacts).setOnClickListener(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(@NonNull View v)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (v.getId()) &#123;</div><div class="line">            <span class="keyword">case</span> R.id.button_camera:</div><div class="line">                <span class="comment">// <span class="doctag">NOTE:</span> delegate the permission handling to generated method</span></div><div class="line">                MainActivityPermissionsDispatcher.showCameraWithCheck(<span class="keyword">this</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.button_contacts:</div><div class="line">                <span class="comment">// <span class="doctag">NOTE:</span> delegate the permission handling to generated method</span></div><div class="line">                MainActivityPermissionsDispatcher.showContactsWithCheck(<span class="keyword">this</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, @NonNull String[] permissions, @NonNull <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</div><div class="line">        <span class="comment">// <span class="doctag">NOTE:</span> delegate the permission handling to generated method</span></div><div class="line">        MainActivityPermissionsDispatcher.onRequestPermissionsResult(<span class="keyword">this</span>, requestCode, grantResults);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@NeedsPermission</span>(Manifest.permission.CAMERA)</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showCamera</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Perform action that requires the permission. If this is run by PermissionsDispatcher, the permission will have been granted</span></div><div class="line">        getSupportFragmentManager().beginTransaction()</div><div class="line">                .replace(R.id.sample_content_fragment, CameraPreviewFragment.newInstance())</div><div class="line">                .addToBackStack(<span class="string">"camera"</span>)</div><div class="line">                .commitAllowingStateLoss();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@NeedsPermission</span>(&#123;Manifest.permission.READ_CONTACTS, Manifest.permission.WRITE_CONTACTS&#125;)</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showContacts</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Perform action that requires the permission.</span></div><div class="line">        <span class="comment">// If this is run by PermissionsDispatcher, the permission will have been granted</span></div><div class="line">        getSupportFragmentManager().beginTransaction()</div><div class="line">                .replace(R.id.sample_content_fragment, ContactsFragment.newInstance())</div><div class="line">                .addToBackStack(<span class="string">"contacts"</span>)</div><div class="line">                .commitAllowingStateLoss();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@OnShowRationale</span>(Manifest.permission.CAMERA)</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showRationaleForCamera</span><span class="params">(PermissionRequest request)</span> </span>&#123;</div><div class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Show a rationale to explain why the permission is needed, e.g. with a dialog.</span></div><div class="line">        <span class="comment">// Call proceed() or cancel() on the provided PermissionRequest to continue or abort</span></div><div class="line">        showRationaleDialog(R.string.permission_camera_rationale, request);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@OnShowRationale</span>(&#123;Manifest.permission.READ_CONTACTS, Manifest.permission.WRITE_CONTACTS&#125;)</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showRationaleForContact</span><span class="params">(PermissionRequest request)</span> </span>&#123;</div><div class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Show a rationale to explain why the permission is needed, e.g. with a dialog.</span></div><div class="line">        <span class="comment">// Call proceed() or cancel() on the provided PermissionRequest to continue or abort</span></div><div class="line">        showRationaleDialog(R.string.permission_contacts_rationale, request);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@OnPermissionDenied</span>(Manifest.permission.CAMERA)</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onCameraDenied</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Deal with a denied permission, e.g. by showing specific UI</span></div><div class="line">        <span class="comment">// or disabling certain functionality</span></div><div class="line">        Toast.makeText(<span class="keyword">this</span>, R.string.permission_camera_denied, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@OnNeverAskAgain</span>(Manifest.permission.CAMERA)</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onCameraNeverAskAgain</span><span class="params">()</span> </span>&#123;</div><div class="line">        Toast.makeText(<span class="keyword">this</span>, R.string.permission_camera_never_askagain, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBackClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        getSupportFragmentManager().popBackStack();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showRationaleDialog</span><span class="params">(@StringRes <span class="keyword">int</span> messageResId, <span class="keyword">final</span> PermissionRequest request)</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> AlertDialog.Builder(<span class="keyword">this</span>)</div><div class="line">                .setPositiveButton(<span class="string">"允许"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(@NonNull DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line">                        request.proceed();</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">                .setNegativeButton(<span class="string">"拒绝"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(@NonNull DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line">                        request.cancel();</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">                .setCancelable(<span class="keyword">false</span>)</div><div class="line">                .setMessage(messageResId)</div><div class="line">                .show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="3、附：危险权限和权限组列表"><a href="#3、附：危险权限和权限组列表" class="headerlink" title="3、附：危险权限和权限组列表"></a>3、附：危险权限和权限组列表</h1><p>Android官方文档：<a href="https://developer.android.com/guide/topics/security/permissions.html#normal-dangerous" target="_blank" rel="external">https://developer.android.com/guide/topics/security/permissions.html#normal-dangerous</a></p>
<p>摘录如下：</p>
<table>
<thead>
<tr>
<th>权限组</th>
<th>权限</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>CALENDAR</strong></td>
<td>READ_CALENDAR<br>WRITE_CALENDAR</td>
</tr>
<tr>
<td><strong>CAMERA</strong></td>
<td>CAMERA</td>
</tr>
<tr>
<td><strong>CONTACTS</strong></td>
<td>READ_CONTACTS<br>WRITE_CONTACTS<br>GET_ACCOUNTS</td>
</tr>
<tr>
<td><strong>LOCATION</strong></td>
<td>ACCESS_FINE_LOCATION<br>ACCESS_COARSE_LOCATION</td>
</tr>
<tr>
<td><strong>PHONE</strong></td>
<td>READ_PHONE_STATE<br>CALL_PHONE<br>READ_CALL_LOG<br>WRITE_CALL_LOG<br>ADD_VOICEMAIL<br>USE_SIP<br>PROCESS_OUTGOING_CALLS</td>
</tr>
<tr>
<td><strong>SENSORS</strong></td>
<td>BODY_SENSORS</td>
</tr>
<tr>
<td><strong>SMS</strong></td>
<td>SEND_SMS<br>RECEIVE_SMS<br>READ_SMS<br>RECEIVE_WAP_PUSH<br>RECEIVE_MMS</td>
</tr>
<tr>
<td><strong>STORAGE</strong></td>
<td>READ_EXTERNAL_STORAGE<br>WRITE_EXTERNAL_STORAGE</td>
</tr>
</tbody>
</table>
<h1 id="4、附：Demo下载"><a href="#4、附：Demo下载" class="headerlink" title="4、附：Demo下载"></a>4、附：Demo下载</h1><p><a href="http://download.csdn.net/detail/u012939909/9722890" target="_blank" rel="external">http://download.csdn.net/detail/u012939909/9722890</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PermissionsDispatcher是一个基于注解、帮助开发者简单处理Android 6.0系统中的运行时权限的开源库。避免了开发者编写大量繁琐的样板代码。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;开源地址：&lt;a href=&quot;https://github.com/hotchem
    
    </summary>
    
      <category term="开源库" scheme="/categories/%E5%BC%80%E6%BA%90%E5%BA%93/"/>
    
    
      <category term="Android" scheme="/tags/Android/"/>
    
      <category term="Permissions" scheme="/tags/Permissions/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio使用Vector Asset的注意事项</title>
    <link href="/2016/12/22/Android%20Studio%E4%BD%BF%E7%94%A8Vector%20Asset%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>/2016/12/22/Android Studio使用Vector Asset的注意事项/</id>
    <published>2016-12-21T16:00:00.000Z</published>
    <updated>2017-05-12T09:03:52.124Z</updated>
    
    <content type="html"><![CDATA[<p>Vector是Android 5.0之后新增加的一项特性，目前已经可以兼容到Android 5.0之前的版本。但使用过程中依然还是可能产生一些兼容性的问题。</p>
<h1 id="1、Android-Studio创建Vector-Asset"><a href="#1、Android-Studio创建Vector-Asset" class="headerlink" title="1、Android Studio创建Vector Asset"></a>1、Android Studio创建Vector Asset</h1><p>在<code>res</code>目录下的<code>drawable</code>目录上单击右键，选择New –&gt; Vector Asset，弹出Asset Studio对话框。<br>目前有两种方式创建vector资源，一种是通过Material Icon生成vector资源，一种是通过SVG或PSD文件生成vector资源。具体操作过程比较简单，不再详述。</p>
<p><img src="http://img.blog.csdn.net/20161222152745875" alt="Asset Studio"></p>
<blockquote>
<p>注意：<strong>最好将生成的vector drawable资源放在<code>drawable</code>目录下或<code>drawable-anydpi</code>目录下。</strong></p>
</blockquote>
<h1 id="2、兼容问题解决"><a href="#2、兼容问题解决" class="headerlink" title="2、兼容问题解决"></a>2、兼容问题解决</h1><p>如果使用的Android Studio版本为2.2以上，gradle版本也较新，生成的vector drawable资源也放在了<code>drawable</code>目录下或<code>drawable-anydpi</code>目录下，则一般就直接可以兼容Android 5.0之前操作系统。</p>
<p>vector drawable资源的使用方式如下，<code>ic_egg05_got.xml</code>为生成的vector 资源。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/ivVector"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:src</span>=<span class="string">"@drawable/ic_egg05_got"</span>/&gt;</div></pre></td></tr></table></figure></p>
<p>如果不满足以上的条件或由于其他原因导致Android 5.0之前的设备无法使用vector资源，也有别的解决办法。</p>
<p>如果设备无法使用vector资源，则会导致应用崩溃，异常信息大致如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Caused by: android.view.InflateException: Binary XML file line #11: Error inflating class ImageView</div><div class="line"></div><div class="line">Caused by: android.content.res.Resources$NotFoundException: File res/drawable-nodpi-v4/egg01_got.xml from drawable resource ID #0x7f020053</div><div class="line"></div><div class="line">Caused by: org.xmlpull.v1.XmlPullParserException: Binary XML file line #2: invalid drawable tag vector</div></pre></td></tr></table></figure>
<h2 id="2-1、修改build-gradle"><a href="#2-1、修改build-gradle" class="headerlink" title="2.1、修改build.gradle"></a>2.1、修改build.gradle</h2><p>打开该模块下的<code>build.gradle</code>文件。</p>
<ul>
<li>如果当前使用的gradle版本为2.0以上，在<code>android</code>节点下的<code>defaultConfig</code>节点下加入一行代码：</li>
</ul>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vectorDrawables.useSupportLibrary = <span class="keyword">true</span></div></pre></td></tr></table></figure>
<ul>
<li>如果使用的gradle版本为2.0以下，1.5以上，则需要在<code>android</code>节点下的<code>defaultConfig</code>节点下加入如下一行代码：</li>
</ul>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">generatedDensities = []</div></pre></td></tr></table></figure>
<p>并在<code>android</code>节点下，<code>defaultConfig</code>节点后面加入</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">aaptOptions &#123;</div><div class="line">	additionalParameters <span class="string">"--no-version-vectors"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>推荐使用较新的gradle版本以免不必要的麻烦。</p>
<p>之后，在<code>dependencies</code>中引入<code>appcompat-v7</code>兼容包，版本需要<code>23.2</code>以上。</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'com.android.support:appcompat-v7:25.0.1'</span></div></pre></td></tr></table></figure>
<h2 id="2-2、修改布局文件"><a href="#2-2、修改布局文件" class="headerlink" title="2.2、修改布局文件"></a>2.2、修改布局文件</h2><p>如果在布局文件中使用了vector drawable资源的话，则需要修改其使用方式为：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app:srcCompat="@drawable/ic_egg05_got"</div></pre></td></tr></table></figure>
<p>需要在根布局中引入命名空间<code>xmlns:app=”<a href="http://schemas.android.com/apk/res-auto" target="_blank" rel="external">http://schemas.android.com/apk/res-auto</a>“</code>。</p>
<h2 id="2-3、修改Activity"><a href="#2-3、修改Activity" class="headerlink" title="2.3、修改Activity"></a>2.3、修改Activity</h2><p>需要将加载vector drawable资源的Activity继承自<code>AppCompatActivity</code>。</p>
<hr>
<p>做完以上工作之后，Android 5.0之前的设备就可以支持使用vector drawable资源了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vector是Android 5.0之后新增加的一项特性，目前已经可以兼容到Android 5.0之前的版本。但使用过程中依然还是可能产生一些兼容性的问题。&lt;/p&gt;
&lt;h1 id=&quot;1、Android-Studio创建Vector-Asset&quot;&gt;&lt;a href=&quot;#1、An
    
    </summary>
    
      <category term="Android基础" scheme="/categories/Android%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Android" scheme="/tags/Android/"/>
    
      <category term="Vector" scheme="/tags/Vector/"/>
    
  </entry>
  
  <entry>
    <title>Android获取本机IPv4地址</title>
    <link href="/2016/12/19/Android%E8%8E%B7%E5%8F%96%E6%9C%AC%E6%9C%BAIPv4%E5%9C%B0%E5%9D%80/"/>
    <id>/2016/12/19/Android获取本机IPv4地址/</id>
    <published>2016-12-18T16:00:00.000Z</published>
    <updated>2017-05-12T09:03:00.324Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>获取本机IPv4地址可分两种情况，一种是<strong>WiFi已开启</strong>，一种是<strong>蜂窝移动数据已开启</strong>。</p>
</blockquote>
<h1 id="1、WiFi已开启"><a href="#1、WiFi已开启" class="headerlink" title="1、WiFi已开启"></a>1、WiFi已开启</h1><p>WiFi开启的情况下，通过WiFi获取本机IP地址，如果仅仅打开WiFi，但并未接入网络，则IP地址可认为是<code>0.0.0.0</code>。<br>如果已经接入网络，则可以通过如下方式获取IPv4地址。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取WiFi服务</span></div><div class="line">WifiManager wifiManager = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);</div><div class="line"><span class="comment">// 判断WiFi是否开启</span></div><div class="line">WifiInfo wifiInfo = wifiManager.getConnectionInfo();</div><div class="line"><span class="keyword">int</span> ipAddress = wifiInfo.getIpAddress();</div><div class="line">String ip = (ipAddress &amp; <span class="number">0xFF</span>) + <span class="string">"."</span> +</div><div class="line">                ((ipAddress &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>) + <span class="string">"."</span> +</div><div class="line">                ((ipAddress &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>) + <span class="string">"."</span> +</div><div class="line">                (ipAddress &gt;&gt; <span class="number">24</span> &amp; <span class="number">0xFF</span>);</div></pre></td></tr></table></figure>
<h1 id="2、蜂窝移动数据已开启"><a href="#2、蜂窝移动数据已开启" class="headerlink" title="2、蜂窝移动数据已开启"></a>2、蜂窝移动数据已开启</h1><p>蜂窝移动数据开启的情况下可以通过如下方式获取IPv4地址。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">	NetworkInterface networkInterface;</div><div class="line">	InetAddress inetAddress;</div><div class="line">	<span class="keyword">for</span> (Enumeration&lt;NetworkInterface&gt; en = NetworkInterface.getNetworkInterfaces(); en.hasMoreElements(); ) &#123;</div><div class="line">		networkInterface = en.nextElement();</div><div class="line">		<span class="keyword">for</span> (Enumeration&lt;InetAddress&gt; enumIpAddr = networkInterface.getInetAddresses(); enumIpAddr.hasMoreElements(); ) &#123;</div><div class="line">			inetAddress = enumIpAddr.nextElement();</div><div class="line">			<span class="keyword">if</span> (!inetAddress.isLoopbackAddress() &amp;&amp; !inetAddress.isLinkLocalAddress()) &#123;</div><div class="line">				String ip = inetAddress.getHostAddress();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125; <span class="keyword">catch</span> (SocketException ex) &#123;</div><div class="line">	ex.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="3、封装为工具类"><a href="#3、封装为工具类" class="headerlink" title="3、封装为工具类"></a>3、封装为工具类</h1><p>可以将以上两种方式封装为一个工具类<code>IPUtils</code>，由工具类自动判断网络类型并调用相应的方法，最终返回一个IPv4地址。<br>完整代码如下所示。</p>
<ul>
<li>IPUtils.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.net.wifi.WifiInfo;</div><div class="line"><span class="keyword">import</span> android.net.wifi.WifiManager;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.net.InetAddress;</div><div class="line"><span class="keyword">import</span> java.net.NetworkInterface;</div><div class="line"><span class="keyword">import</span> java.net.SocketException;</div><div class="line"><span class="keyword">import</span> java.util.Enumeration;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * =======================================================</div><div class="line"> * 版权：Copyright LiYing 2015-2016. All rights reserved.</div><div class="line"> * 作者：liying - liruoer2008@yeah.net</div><div class="line"> * 日期：2016/12/19 19:43</div><div class="line"> * 版本：1.0</div><div class="line"> * 描述：IP地址工具类</div><div class="line"> * 备注：</div><div class="line"> * =======================================================</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IPUtils</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取本机IPv4地址</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> context</div><div class="line">     * <span class="doctag">@return</span> 本机IPv4地址；null：无网络连接</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getIpAddress</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="comment">// 获取WiFi服务</span></div><div class="line">        WifiManager wifiManager = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);</div><div class="line">        <span class="comment">// 判断WiFi是否开启</span></div><div class="line">        <span class="keyword">if</span> (wifiManager.isWifiEnabled()) &#123;</div><div class="line">            <span class="comment">// 已经开启了WiFi</span></div><div class="line">            WifiInfo wifiInfo = wifiManager.getConnectionInfo();</div><div class="line">            <span class="keyword">int</span> ipAddress = wifiInfo.getIpAddress();</div><div class="line">            String ip = intToIp(ipAddress);</div><div class="line">            <span class="keyword">return</span> ip;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// 未开启WiFi</span></div><div class="line">            <span class="keyword">return</span> getIpAddress();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">intToIp</span><span class="params">(<span class="keyword">int</span> ipAddress)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (ipAddress &amp; <span class="number">0xFF</span>) + <span class="string">"."</span> +</div><div class="line">                ((ipAddress &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>) + <span class="string">"."</span> +</div><div class="line">                ((ipAddress &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>) + <span class="string">"."</span> +</div><div class="line">                (ipAddress &gt;&gt; <span class="number">24</span> &amp; <span class="number">0xFF</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取本机IPv4地址</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> 本机IPv4地址；null：无网络连接</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getIpAddress</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            NetworkInterface networkInterface;</div><div class="line">            InetAddress inetAddress;</div><div class="line">            <span class="keyword">for</span> (Enumeration&lt;NetworkInterface&gt; en = NetworkInterface.getNetworkInterfaces(); en.hasMoreElements(); ) &#123;</div><div class="line">                networkInterface = en.nextElement();</div><div class="line">                <span class="keyword">for</span> (Enumeration&lt;InetAddress&gt; enumIpAddr = networkInterface.getInetAddresses(); enumIpAddr.hasMoreElements(); ) &#123;</div><div class="line">                    inetAddress = enumIpAddr.nextElement();</div><div class="line">                    <span class="keyword">if</span> (!inetAddress.isLoopbackAddress() &amp;&amp; !inetAddress.isLinkLocalAddress()) &#123;</div><div class="line">                        <span class="keyword">return</span> inetAddress.getHostAddress();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125; <span class="keyword">catch</span> (SocketException ex) &#123;</div><div class="line">            ex.printStackTrace();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>之后，只需要在需要得到IPv4地址的位置调用<code>IPUtils.getIpAddress(Context context)</code>即可。</p>
<p>最后，别忘了在<code>AndroidManifest.xml</code>文件中声明需要的权限，如下。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_WIFI_STATE"</span>/&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;获取本机IPv4地址可分两种情况，一种是&lt;strong&gt;WiFi已开启&lt;/strong&gt;，一种是&lt;strong&gt;蜂窝移动数据已开启&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1、WiFi已开启&quot;&gt;&lt;a href=&quot;#1
    
    </summary>
    
      <category term="Android基础" scheme="/categories/Android%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Android" scheme="/tags/Android/"/>
    
      <category term="IP" scheme="/tags/IP/"/>
    
      <category term="IPv4" scheme="/tags/IPv4/"/>
    
  </entry>
  
  <entry>
    <title>使用Android Studio进行多渠道打包</title>
    <link href="/2016/12/17/%E4%BD%BF%E7%94%A8Android%20Studio%E8%BF%9B%E8%A1%8C%E5%A4%9A%E6%B8%A0%E9%81%93%E6%89%93%E5%8C%85/"/>
    <id>/2016/12/17/使用Android Studio进行多渠道打包/</id>
    <published>2016-12-16T16:00:00.000Z</published>
    <updated>2017-05-12T09:02:15.081Z</updated>
    
    <content type="html"><![CDATA[<p>以<strong>友盟统计</strong>为例。</p>
<p>在<code>AndroidManifest.xml</code>文件中声明channel信息，如下。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta-data</span></span></div><div class="line">    <span class="attr">android:name</span>=<span class="string">"UMENG_APPKEY"</span></div><div class="line">    <span class="attr">android:value</span>=<span class="string">"产品的APPKEY"</span> /&gt;</div><div class="line"><span class="tag">&lt;<span class="name">meta-data</span></span></div><div class="line">    <span class="attr">android:name</span>=<span class="string">"UMENG_CHANNEL"</span></div><div class="line">    <span class="attr">android:value</span>=<span class="string">"$&#123;UMENG_CHANNEL_VALUE&#125;"</span> /&gt;</div></pre></td></tr></table></figure>
<p>在主module下的<code>build.gradle</code>文件中<code>android</code>节点下配置<code>productFlavors</code>，如下。</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">productFlavors &#123;</div><div class="line">    fir &#123;</div><div class="line">        manifestPlaceholders = [UMENG_CHANNEL_VALUE: <span class="string">"fir"</span>]</div><div class="line">    &#125;</div><div class="line">    _360 &#123;</div><div class="line">        manifestPlaceholders = [UMENG_CHANNEL_VALUE: <span class="string">"360"</span>]</div><div class="line">    &#125;</div><div class="line">    baidu &#123;</div><div class="line">        manifestPlaceholders = [UMENG_CHANNEL_VALUE: <span class="string">"baidu"</span>]</div><div class="line">    &#125;</div><div class="line">    _91 &#123;</div><div class="line">        manifestPlaceholders = [UMENG_CHANNEL_VALUE: <span class="string">"91"</span>]</div><div class="line">    &#125;</div><div class="line">    hiapk &#123;</div><div class="line">        manifestPlaceholders = [UMENG_CHANNEL_VALUE: <span class="string">"hiapk"</span>]</div><div class="line">    &#125;</div><div class="line">    tqq &#123;</div><div class="line">        manifestPlaceholders = [UMENG_CHANNEL_VALUE: <span class="string">"tqq"</span>]</div><div class="line">    &#125;</div><div class="line">    wandoujia &#123;</div><div class="line">        manifestPlaceholders = [UMENG_CHANNEL_VALUE: <span class="string">"wandoujia"</span>]</div><div class="line">    &#125;</div><div class="line">    xiaomi &#123;</div><div class="line">        manifestPlaceholders = [UMENG_CHANNEL_VALUE: <span class="string">"xiaomi"</span>]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p> <strong>上面的fir、_360、baidu， _91等是Flavor名称，双引号里面的fir、360、baidu、91等是渠道名称。</strong> </p>
</blockquote>
<p>最后可以 在<code>android</code>节点下的<code>buildTypes</code>节点下指定输出APK的文件名。<br>比如要输出文件名格式为“ipgw_4.2.5_fir.apk”，其中，ipgw为产品名称，4.2.5为版本名称，fir为渠道名称，各部分之间用下划线分割。<br>代码片段如下：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">applicationVariants.all &#123;</div><div class="line">    variant -&gt;</div><div class="line">        variant.outputs.<span class="keyword">each</span> &#123;</div><div class="line">            output -&gt;</div><div class="line">                <span class="keyword">def</span> outFile = output.outputFile</div><div class="line">                <span class="keyword">if</span> (outFile != <span class="keyword">null</span> &amp;&amp; outFile.name.endsWith(<span class="string">".apk"</span>)) &#123;</div><div class="line">                    <span class="keyword">def</span> fileName = <span class="string">"ipgw_4.2.5_$&#123;variant.productFlavors[0].name.replaceAll("</span>_<span class="string">", "</span><span class="string">")&#125;.apk"</span></div><div class="line">                    output.outputFile = <span class="keyword">new</span> <span class="keyword">File</span>(outFile.parent, fileName)</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>到此，配置就算完成了。</p>
<p>点击Android Studio菜单栏中的“Build”，选择“Generate Signed APK…”，选择keystore，输入密码等，点击“Next”，出现渠道选择界面，如下图。</p>
<p><img src="http://img.blog.csdn.net/20161217161351553" alt="选择渠道"></p>
<p>此处可以选择需要打包的渠道，当然也可以按<code>Ctrl + A</code>全选。<br>点击Finish开始打包。<br>打包完成之后，在工程的主模块目录下就可以看到已经经过 <strong>打包、签名、命名</strong> 好的APK文件了，如下图所示。</p>
<p><img src="http://img.blog.csdn.net/20161217162538709" alt="打包完成"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以&lt;strong&gt;友盟统计&lt;/strong&gt;为例。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;AndroidManifest.xml&lt;/code&gt;文件中声明channel信息，如下。&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
    
    </summary>
    
      <category term="相关技能" scheme="/categories/%E7%9B%B8%E5%85%B3%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="Android" scheme="/tags/Android/"/>
    
      <category term="打包" scheme="/tags/%E6%89%93%E5%8C%85/"/>
    
      <category term="多渠道" scheme="/tags/%E5%A4%9A%E6%B8%A0%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>问题解决：启动Genymotion模拟器，执行adb命令异常</title>
    <link href="/2016/12/07/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%EF%BC%9A%E5%90%AF%E5%8A%A8Genymotion%E6%A8%A1%E6%8B%9F%E5%99%A8%EF%BC%8C%E6%89%A7%E8%A1%8Cadb%E5%91%BD%E4%BB%A4%E5%BC%82%E5%B8%B8/"/>
    <id>/2016/12/07/问题解决：启动Genymotion模拟器，执行adb命令异常/</id>
    <published>2016-12-06T16:00:00.000Z</published>
    <updated>2017-05-12T09:01:23.872Z</updated>
    
    <content type="html"><![CDATA[<h2 id="异常信息"><a href="#异常信息" class="headerlink" title="异常信息"></a>异常信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">adb server version (32) doesn&apos;t match this client (36); killing...</div><div class="line">error: could not install *smartsocket* listener: cannot bind to 127.0.0.1:5037: 通常每个套接字地址(协议/网络地址/端口)只允许使用一次。 (10048)</div><div class="line">could not read ok from ADB Server</div><div class="line">* failed to start daemon *</div><div class="line">error: cannot connect to daemon</div></pre></td></tr></table></figure>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h3 id="1、设置Android-SDK路径"><a href="#1、设置Android-SDK路径" class="headerlink" title="1、设置Android SDK路径"></a>1、设置Android SDK路径</h3><p>如图所示，选择“Use custom Android SDK tools”选项，然后选择一个本地的SDK路径。</p>
<p><img src="http://img.blog.csdn.net/20161207223607903" alt="填写自己的SDK路径"></p>
<h3 id="2、添加PATH环境变量"><a href="#2、添加PATH环境变量" class="headerlink" title="2、添加PATH环境变量"></a>2、添加PATH环境变量</h3><p>将上图中选择的路径添加进PATH变量里，操作流程如下图所示。</p>
<p><img src="http://img.blog.csdn.net/20161207224454830" alt="添加环境变量"></p>
<h3 id="3、重启Genymotion模拟器"><a href="#3、重启Genymotion模拟器" class="headerlink" title="3、重启Genymotion模拟器"></a>3、重启Genymotion模拟器</h3><p>更改完成之后，重新启动Genymotion模拟器，再次执行adb相关命令就可以正常显示结果了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;异常信息&quot;&gt;&lt;a href=&quot;#异常信息&quot; class=&quot;headerlink&quot; title=&quot;异常信息&quot;&gt;&lt;/a&gt;异常信息&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
    
    </summary>
    
      <category term="问题解决" scheme="/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    
    
      <category term="Genymotion" scheme="/tags/Genymotion/"/>
    
  </entry>
  
  <entry>
    <title>记录个人PC使用的软件列表(部分)</title>
    <link href="/2016/12/07/%E8%AE%B0%E5%BD%95%E4%B8%AA%E4%BA%BAPC%E4%BD%BF%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%88%97%E8%A1%A8(%E9%83%A8%E5%88%86)/"/>
    <id>/2016/12/07/记录个人PC使用的软件列表(部分)/</id>
    <published>2016-12-06T16:00:00.000Z</published>
    <updated>2017-05-12T08:59:26.073Z</updated>
    
    <content type="html"><![CDATA[<p>记录此列表以备不时之需：以后换电脑时可以轻松找到之前使用的一些很顺手的软件。</p>
<h2 id="1、IDE"><a href="#1、IDE" class="headerlink" title="1、IDE"></a>1、IDE</h2><ul>
<li>IntelliJ IDEA</li>
<li>JetBrains CLion</li>
<li>JetBrains PhpStorm </li>
<li>JetBrains WebStorm</li>
<li>Eclipse</li>
<li>Android Studio</li>
<li>微信web开发者工具</li>
</ul>
<h2 id="2、开发环境"><a href="#2、开发环境" class="headerlink" title="2、开发环境"></a>2、开发环境</h2><ul>
<li>Java</li>
<li>Python 2.7</li>
<li>Node.js</li>
</ul>
<h2 id="3、图片相关"><a href="#3、图片相关" class="headerlink" title="3、图片相关"></a>3、图片相关</h2><ul>
<li>Adobe Photoshop</li>
<li>FastStone Image Viewer</li>
<li>FSCapture</li>
<li>Ulead GIF Animator</li>
<li>Iconion</li>
<li>美图秀秀</li>
</ul>
<h2 id="4、下载工具"><a href="#4、下载工具" class="headerlink" title="4、下载工具"></a>4、下载工具</h2><ul>
<li>硕鼠</li>
<li>维棠FLV视频下载软件</li>
<li>µTorrent</li>
</ul>
<h2 id="5、浏览器"><a href="#5、浏览器" class="headerlink" title="5、浏览器"></a>5、浏览器</h2><ul>
<li>Google Chrome</li>
<li>360极速浏览器</li>
<li>Mozilla Firefox</li>
</ul>
<h2 id="6、代码编辑器"><a href="#6、代码编辑器" class="headerlink" title="6、代码编辑器"></a>6、代码编辑器</h2><ul>
<li>EditPlus</li>
<li>Notepad++</li>
<li>Sublime Text 3</li>
<li>MarkdownPad 2</li>
<li>Visual Studio Code</li>
<li>Beyond Compare 4</li>
</ul>
<h2 id="7、数据库工具"><a href="#7、数据库工具" class="headerlink" title="7、数据库工具"></a>7、数据库工具</h2><ul>
<li>SQLyog</li>
<li>Navicat for SQLite</li>
</ul>
<h2 id="8、其他开发相关的工具"><a href="#8、其他开发相关的工具" class="headerlink" title="8、其他开发相关的工具"></a>8、其他开发相关的工具</h2><ul>
<li>Git</li>
<li>Genymotion</li>
<li>Oracle VM VirtualBox</li>
<li>CoolFormat</li>
<li>Lantern</li>
<li>jd-gui</li>
<li>phpStudy</li>
<li>PxCook</li>
<li>Postman</li>
<li>SecureCRT 7.0</li>
<li>源代码统计工具</li>
</ul>
<h2 id="9、录屏工具"><a href="#9、录屏工具" class="headerlink" title="9、录屏工具"></a>9、录屏工具</h2><ul>
<li>Bandicam</li>
<li>LICEcap</li>
<li>小萝贝控机大师</li>
</ul>
<h2 id="10、其他"><a href="#10、其他" class="headerlink" title="10、其他"></a>10、其他</h2><ul>
<li>为知笔记</li>
<li>pCloud Drive</li>
<li>完美解码(PotPlayer)</li>
<li>Adobe Acrobat</li>
<li>Microsoft Office 2016</li>
<li>Visio 2016</li>
<li>AxMath</li>
<li>Fiddler4</li>
<li>FileZilla Client</li>
<li>QQ拼音输入法</li>
<li>WinRAR</li>
<li>360压缩</li>
<li>UltraISO</li>
<li>分区助手</li>
<li>WinSCP</li>
<li>屏幕亮度调节20130523</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录此列表以备不时之需：以后换电脑时可以轻松找到之前使用的一些很顺手的软件。&lt;/p&gt;
&lt;h2 id=&quot;1、IDE&quot;&gt;&lt;a href=&quot;#1、IDE&quot; class=&quot;headerlink&quot; title=&quot;1、IDE&quot;&gt;&lt;/a&gt;1、IDE&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Intell
    
    </summary>
    
      <category term="记录" scheme="/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Android时间轴(Timeline)效果的实现(使用RecyclerView)</title>
    <link href="/2016/12/07/Android%E6%97%B6%E9%97%B4%E8%BD%B4(Timeline)%E6%95%88%E6%9E%9C%E7%9A%84%E5%AE%9E%E7%8E%B0(%E4%BD%BF%E7%94%A8RecyclerView)/"/>
    <id>/2016/12/07/Android时间轴(Timeline)效果的实现(使用RecyclerView)/</id>
    <published>2016-12-06T16:00:00.000Z</published>
    <updated>2017-05-12T08:59:58.561Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、时间轴效果"><a href="#1、时间轴效果" class="headerlink" title="1、时间轴效果"></a>1、时间轴效果</h2><p>我们要实现的时间轴效果如下图所示，这是锤子手机的查看物流信息界面的截图。<br><img src="http://img.blog.csdn.net/20161126155452052" alt="物流信息的时间线"></p>
<h2 id="2、主要布局的实现"><a href="#2、主要布局的实现" class="headerlink" title="2、主要布局的实现"></a>2、主要布局的实现</h2><p>在<code>TraceActivity</code>关联的布局文件<code>activity_trace.xml</code>中放置一个<code>RecyclerView</code>，代码如下。将<code>overScrollMode</code>属性设置为<code>never</code>是为了去除列表滑动到顶部或底部时产生的波纹效果。</p>
<ul>
<li>activity_trace.xml<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/activity_main"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">    <span class="attr">android:background</span>=<span class="string">"@android:color/white"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"cc.duduhuo.timelinerecyclerview.TraceActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/rvTrace"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:overScrollMode</span>=<span class="string">"never"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>注意：使用<code>RecyclerView</code>需要先在<code>dependencies</code>中引入<code>recyclerview</code>库，如：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'com.android.support:recyclerview-v7:25.0.1'</span></div></pre></td></tr></table></figure>
<p>之后再设计每个列表项的布局<code>item_trace.xml</code>，代码如下。</p>
<p>在item的布局中，我们先使用<code>LinearLayout</code>将布局分成左右两个部分，左边就是时间轴的布局，右边是物流信息的布局。</p>
<p>先说物流信息的布局，物流信息是一个<code>RelativeLayout</code>，其内放置两个<code>TextView</code>分别用于承载物流信息的时间的描述的显示，为了不使两个列表项的文本靠得太近，我们在<code>RelativeLayout</code>中设置其<code>paddingBottom</code>和<code>paddingTop</code>属性。</p>
<p>再说时间轴的布局，时间轴的布局也是一个<code>RelativeLayout</code>，但是不设置其<code>padding</code>属性，宽度为32dp。为了使时间轴的圆点和显示时间的文本对齐，我们需要在圆点之上再放置一条竖线，所以整体的布局就是 <code>线 - 点 - 线</code>。为了让线可以正好对准圆点的中心，我们让线和点都水平居中，即<code>android:layout_centerHorizontal=”true”</code>。</p>
<ul>
<li>item_trace.xml<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/rlTimeline"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"32dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/tvTopLine"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"0.5dp"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"12dp"</span></div><div class="line">            <span class="attr">android:layout_centerHorizontal</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"#999"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/tvDot"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"5dp"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"5dp"</span></div><div class="line">            <span class="attr">android:layout_below</span>=<span class="string">"@id/tvTopLine"</span></div><div class="line">            <span class="attr">android:layout_centerHorizontal</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"@drawable/timelline_dot_normal"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"0.5dp"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_below</span>=<span class="string">"@id/tvDot"</span></div><div class="line">            <span class="attr">android:layout_centerHorizontal</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"#999"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/rlCenter"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:paddingBottom</span>=<span class="string">"6dp"</span></div><div class="line">        <span class="attr">android:paddingRight</span>=<span class="string">"10dp"</span></div><div class="line">        <span class="attr">android:paddingTop</span>=<span class="string">"6dp"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/tvAcceptTime"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"2014/06/24 20:55:28"</span></div><div class="line">            <span class="attr">android:textColor</span>=<span class="string">"#999"</span></div><div class="line">            <span class="attr">android:textSize</span>=<span class="string">"12sp"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/tvAcceptStation"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_below</span>=<span class="string">"@id/tvAcceptTime"</span></div><div class="line">            <span class="attr">android:layout_marginTop</span>=<span class="string">"5dp"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"快件在 深圳 ,准备送往下一站 深圳集散中心 [深圳市]"</span></div><div class="line">            <span class="attr">android:textColor</span>=<span class="string">"#999"</span></div><div class="line">            <span class="attr">android:textSize</span>=<span class="string">"12sp"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>圆点的背景资源如下代码：</p>
<ul>
<li><p>timelline_dot_first.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">shape</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:shape</span>=<span class="string">"oval"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">size</span></span></div><div class="line">        <span class="attr">android:width</span>=<span class="string">"10dp"</span></div><div class="line">        <span class="attr">android:height</span>=<span class="string">"10dp"</span> /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"#555555"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>timelline_dot_normal.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">shape</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:shape</span>=<span class="string">"oval"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">size</span></span></div><div class="line">        <span class="attr">android:width</span>=<span class="string">"10dp"</span></div><div class="line">        <span class="attr">android:height</span>=<span class="string">"10dp"</span> /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"#999999"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="3、Activity"><a href="#3、Activity" class="headerlink" title="3、Activity"></a>3、Activity</h2><p>为了可以看到布局的效果，我们在<code>TraceActivity</code>中模拟一些假数据。需要定义一个实体类<code>Trace</code>，它有两个属性，<code>acceptTime</code>和<code>acceptStation</code>，代码如下：</p>
<ul>
<li>Trace.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Trace</span> </span>&#123;</div><div class="line">    <span class="comment">/** 时间 */</span></div><div class="line">    <span class="keyword">private</span> String acceptTime;</div><div class="line">    <span class="comment">/** 描述 */</span></div><div class="line">    <span class="keyword">private</span> String acceptStation;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Trace</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Trace</span><span class="params">(String acceptTime, String acceptStation)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.acceptTime = acceptTime;</div><div class="line">        <span class="keyword">this</span>.acceptStation = acceptStation;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAcceptTime</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> acceptTime;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAcceptTime</span><span class="params">(String acceptTime)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.acceptTime = acceptTime;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAcceptStation</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> acceptStation;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAcceptStation</span><span class="params">(String acceptStation)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.acceptStation = acceptStation;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>TraceActivity.java<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TraceActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> RecyclerView rvTrace;</div><div class="line">    <span class="keyword">private</span> List&lt;Trace&gt; traceList = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10</span>);</div><div class="line">    <span class="keyword">private</span> TraceListAdapter adapter;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_trace);</div><div class="line">        findView();</div><div class="line">        initData();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">findView</span><span class="params">()</span> </span>&#123;</div><div class="line">        rvTrace = (RecyclerView) findViewById(R.id.rvTrace);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 模拟一些假的数据</span></div><div class="line">        traceList.add(<span class="keyword">new</span> Trace(<span class="string">"2016-05-25 17:48:00"</span>, <span class="string">"[沈阳市] [沈阳和平五部]的派件已签收 感谢使用中通快递,期待再次为您服务!"</span>));</div><div class="line">        traceList.add(<span class="keyword">new</span> Trace(<span class="string">"2016-05-25 14:13:00"</span>, <span class="string">"[沈阳市] [沈阳和平五部]的东北大学代理点正在派件 电话:18040xxxxxx 请保持电话畅通、耐心等待"</span>));</div><div class="line">        traceList.add(<span class="keyword">new</span> Trace(<span class="string">"2016-05-25 13:01:04"</span>, <span class="string">"[沈阳市] 快件到达 [沈阳和平五部]"</span>));</div><div class="line">        traceList.add(<span class="keyword">new</span> Trace(<span class="string">"2016-05-25 12:19:47"</span>, <span class="string">"[沈阳市] 快件离开 [沈阳中转]已发往[沈阳和平五部]"</span>));</div><div class="line">        traceList.add(<span class="keyword">new</span> Trace(<span class="string">"2016-05-25 11:12:44"</span>, <span class="string">"[沈阳市] 快件到达 [沈阳中转]"</span>));</div><div class="line">        traceList.add(<span class="keyword">new</span> Trace(<span class="string">"2016-05-24 03:12:12"</span>, <span class="string">"[嘉兴市] 快件离开 [杭州中转部]已发往[沈阳中转]"</span>));</div><div class="line">        traceList.add(<span class="keyword">new</span> Trace(<span class="string">"2016-05-23 21:06:46"</span>, <span class="string">"[杭州市] 快件到达 [杭州汽运部]"</span>));</div><div class="line">        traceList.add(<span class="keyword">new</span> Trace(<span class="string">"2016-05-23 18:59:41"</span>, <span class="string">"[杭州市] 快件离开 [杭州乔司区]已发往[沈阳]"</span>));</div><div class="line">        traceList.add(<span class="keyword">new</span> Trace(<span class="string">"2016-05-23 18:35:32"</span>, <span class="string">"[杭州市] [杭州乔司区]的市场部已收件 电话:18358xxxxxx"</span>));</div><div class="line">        adapter = <span class="keyword">new</span> TraceListAdapter(<span class="keyword">this</span>, traceList);</div><div class="line">        rvTrace.setLayoutManager(<span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>));</div><div class="line">        rvTrace.setAdapter(adapter);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="4、Adapter"><a href="#4、Adapter" class="headerlink" title="4、Adapter"></a>4、Adapter</h2><p>需要为<code>RecyclerView</code>设置一个Adapter。定义一个<code>TraceListAdapter</code>，代码如下。由于第一行的物流信息的显示形式和其他的不一样，所以把item分成两个类型，<code>TYPE_TOP </code>指第一行的item，<code>TYPE_NORMAL</code>指其他的item。区别在于，第一行的item的时间轴布局中最上面的线不显示，而且文字颜色和圆点的颜色较深。其余item文字颜色和圆点颜色稍浅一些，而且<code>线 - 点 - 线</code>也全都显示。</p>
<ul>
<li>TraceListAdapter.java<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TraceListAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">RecyclerView</span>.<span class="title">ViewHolder</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> LayoutInflater inflater;</div><div class="line">    <span class="keyword">private</span> List&lt;Trace&gt; traceList = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">1</span>);</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_TOP = <span class="number">0x0000</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_NORMAL= <span class="number">0x0001</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TraceListAdapter</span><span class="params">(Context context, List&lt;Trace&gt; traceList)</span> </span>&#123;</div><div class="line">        inflater = LayoutInflater.from(context);</div><div class="line">        <span class="keyword">this</span>.traceList = traceList;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ViewHolder(inflater.inflate(R.layout.item_trace, parent, <span class="keyword">false</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(RecyclerView.ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        ViewHolder itemHolder = (ViewHolder) holder;</div><div class="line">        <span class="keyword">if</span> (getItemViewType(position) == TYPE_TOP) &#123;</div><div class="line">            <span class="comment">// 第一行头的竖线不显示</span></div><div class="line">            itemHolder.tvTopLine.setVisibility(View.INVISIBLE);</div><div class="line">            <span class="comment">// 字体颜色加深</span></div><div class="line">            itemHolder.tvAcceptTime.setTextColor(<span class="number">0xff555555</span>);</div><div class="line">            itemHolder.tvAcceptStation.setTextColor(<span class="number">0xff555555</span>);</div><div class="line">            itemHolder.tvDot.setBackgroundResource(R.drawable.timelline_dot_first);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (getItemViewType(position) == TYPE_NORMAL) &#123;</div><div class="line">            itemHolder.tvTopLine.setVisibility(View.VISIBLE);</div><div class="line">            itemHolder.tvAcceptTime.setTextColor(<span class="number">0xff999999</span>);</div><div class="line">            itemHolder.tvAcceptStation.setTextColor(<span class="number">0xff999999</span>);</div><div class="line">            itemHolder.tvDot.setBackgroundResource(R.drawable.timelline_dot_normal);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        itemHolder.bindHolder(traceList.get(position));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> traceList.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemViewType</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (position == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> TYPE_TOP;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> TYPE_NORMAL;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> TextView tvAcceptTime, tvAcceptStation;</div><div class="line">        <span class="keyword">private</span> TextView tvTopLine, tvDot;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View itemView)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(itemView);</div><div class="line">            tvAcceptTime = (TextView) itemView.findViewById(R.id.tvAcceptTime);</div><div class="line">            tvAcceptStation = (TextView) itemView.findViewById(R.id.tvAcceptStation);</div><div class="line">            tvTopLine = (TextView) itemView.findViewById(R.id.tvTopLine);</div><div class="line">            tvDot = (TextView) itemView.findViewById(R.id.tvDot);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bindHolder</span><span class="params">(Trace trace)</span> </span>&#123;</div><div class="line">            tvAcceptTime.setText(trace.getAcceptTime());</div><div class="line">            tvAcceptStation.setText(trace.getAcceptStation());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="5、效果展示"><a href="#5、效果展示" class="headerlink" title="5、效果展示"></a>5、效果展示</h2><p><img src="http://img.blog.csdn.net/20161126165230733" alt="Trace_Demo"></p>
<h2 id="6、代码下载"><a href="#6、代码下载" class="headerlink" title="6、代码下载"></a>6、代码下载</h2><p><a href="http://download.csdn.net/detail/u012939909/9704908" target="_blank" rel="external">Demo代码下载</a></p>
<p><strong>关于如何使用ListView实现时间轴效果请参考文章：<a href="http://blog.csdn.net/u012939909/article/details/53352308" target="_blank" rel="external">Android时间轴(Timeline)效果的实现</a></strong>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、时间轴效果&quot;&gt;&lt;a href=&quot;#1、时间轴效果&quot; class=&quot;headerlink&quot; title=&quot;1、时间轴效果&quot;&gt;&lt;/a&gt;1、时间轴效果&lt;/h2&gt;&lt;p&gt;我们要实现的时间轴效果如下图所示，这是锤子手机的查看物流信息界面的截图。&lt;br&gt;&lt;img src=&quot;
    
    </summary>
    
      <category term="View" scheme="/categories/View/"/>
    
    
      <category term="Android" scheme="/tags/Android/"/>
    
      <category term="Timeline" scheme="/tags/Timeline/"/>
    
      <category term="RecyclerView" scheme="/tags/RecyclerView/"/>
    
  </entry>
  
  <entry>
    <title>记录个人Android Studio安装插件列表</title>
    <link href="/2016/12/07/%E8%AE%B0%E5%BD%95%E4%B8%AA%E4%BA%BAAndroid%20Studio%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6%E5%88%97%E8%A1%A8/"/>
    <id>/2016/12/07/记录个人Android Studio安装插件列表/</id>
    <published>2016-12-06T16:00:00.000Z</published>
    <updated>2017-05-12T09:00:43.862Z</updated>
    
    <content type="html"><![CDATA[<p>写这个列表是为了以后重装AndroidStudio之后可以找到之前所用的插件。</p>
<ul>
<li>.ignore</li>
<li>ADB WIFI</li>
<li>Android File Grouping</li>
<li>Android Parcelable code generator</li>
<li>Android Selector</li>
<li>Codota</li>
<li>Genymotion</li>
<li>Groovy</li>
<li>GsonFormat</li>
<li>JSONOnlineViewer</li>
<li>Kotlin</li>
<li>Markdown Navigator</li>
<li>PermissionsDispatcher plugin</li>
<li>Sexy Editor</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写这个列表是为了以后重装AndroidStudio之后可以找到之前所用的插件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.ignore&lt;/li&gt;
&lt;li&gt;ADB WIFI&lt;/li&gt;
&lt;li&gt;Android File Grouping&lt;/li&gt;
&lt;li&gt;Android Parcelable
    
    </summary>
    
      <category term="记录" scheme="/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>小技巧：使用Excel通过拼接文本批量生成代码</title>
    <link href="/2016/11/27/%E5%B0%8F%E6%8A%80%E5%B7%A7%EF%BC%9A%E4%BD%BF%E7%94%A8Excel%E9%80%9A%E8%BF%87%E6%8B%BC%E6%8E%A5%E6%96%87%E6%9C%AC%E6%89%B9%E9%87%8F%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81/"/>
    <id>/2016/11/27/小技巧：使用Excel通过拼接文本批量生成代码/</id>
    <published>2016-11-26T16:00:00.000Z</published>
    <updated>2017-05-13T00:38:20.152Z</updated>
    
    <content type="html"><![CDATA[<p>操作比较简单，我就不叙述了，直接上动图。</p>
<h2 id="1、分割代码片段"><a href="#1、分割代码片段" class="headerlink" title="1、分割代码片段"></a>1、分割代码片段</h2><p><img src="http://img.blog.csdn.net/20161127164519867" alt="Step1"></p>
<h2 id="2、使用表达式生成一行代码"><a href="#2、使用表达式生成一行代码" class="headerlink" title="2、使用表达式生成一行代码"></a>2、使用表达式生成一行代码</h2><p><img src="http://img.blog.csdn.net/20161127164616682" alt="Step2"></p>
<h2 id="3、批量生成代码"><a href="#3、批量生成代码" class="headerlink" title="3、批量生成代码"></a>3、批量生成代码</h2><p><img src="http://img.blog.csdn.net/20161127171809660" alt="Step3"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;操作比较简单，我就不叙述了，直接上动图。&lt;/p&gt;
&lt;h2 id=&quot;1、分割代码片段&quot;&gt;&lt;a href=&quot;#1、分割代码片段&quot; class=&quot;headerlink&quot; title=&quot;1、分割代码片段&quot;&gt;&lt;/a&gt;1、分割代码片段&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://i
    
    </summary>
    
      <category term="其他技能" scheme="/categories/%E5%85%B6%E4%BB%96%E6%8A%80%E8%83%BD/"/>
    
    
  </entry>
  
  <entry>
    <title>Android Studio2.2中JNI的简单使用</title>
    <link href="/2016/11/27/Android%20Studio2.2%E4%B8%ADJNI%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>/2016/11/27/Android Studio2.2中JNI的简单使用/</id>
    <published>2016-11-26T16:00:00.000Z</published>
    <updated>2017-05-12T08:55:29.237Z</updated>
    
    <content type="html"><![CDATA[<h2 id="方式1：直接创建包含C-支持的项目"><a href="#方式1：直接创建包含C-支持的项目" class="headerlink" title="方式1：直接创建包含C++支持的项目"></a>方式1：直接创建包含C++支持的项目</h2><p>如下图所示，创建项目时，勾选“Include C++ Support”选项。</p>
<p><img src="http://img.blog.csdn.net/20161127134708974" alt="Jni include"></p>
<h2 id="方式2：手动引入C-支持"><a href="#方式2：手动引入C-支持" class="headerlink" title="方式2：手动引入C++支持"></a>方式2：手动引入C++支持</h2><p>在没有勾选“Include C++ Support”选项的情况下，创建出来的项目大致是这样子的（Project视图）：</p>
<p><img src="http://img.blog.csdn.net/20161127135338837" alt="不含JNI的目录结构"></p>
<p><strong><em>引入C++支持的步骤：</em></strong></p>
<p>###1、配置NDK路径<br>在项目节点上点右键，选择“Open Module Settings”。<br>配置Android NDK Location，如下图所示：<br><img src="http://img.blog.csdn.net/20161127142125347" alt="NDK Location"></p>
<blockquote>
<p>需要下载NDK、CMake等工具。</p>
</blockquote>
<h3 id="2、编写CMakeLists-txt文件"><a href="#2、编写CMakeLists-txt文件" class="headerlink" title="2、编写CMakeLists.txt文件"></a>2、编写CMakeLists.txt文件</h3><p>在app目录下新建一个文件(File)，名称为 “CMakeLists.txt” 。<br>在其中添加如下内容：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">cmake_minimum_required(VERSION 3.4.1) # CMake版本</div><div class="line"></div><div class="line">add_library(</div><div class="line">             test-lib # 动态库的名称</div><div class="line"></div><div class="line">             SHARED # 作为共享库（动态引入）</div><div class="line"></div><div class="line">             src/main/cpp/test-lib.cpp # cpp源文件路径</div><div class="line">            )</div><div class="line"></div><div class="line">find_library(</div><div class="line">                log-lib</div><div class="line">                log</div><div class="line">            )</div><div class="line"></div><div class="line"># 被链接的目标库的名称</div><div class="line">target_link_libraries(</div><div class="line">                       test-lib</div><div class="line">                       $&#123;log-lib&#125;</div><div class="line">                     )</div></pre></td></tr></table></figure>
<h3 id="3、在Java文件中创建native方法、加载动态库并使用"><a href="#3、在Java文件中创建native方法、加载动态库并使用" class="headerlink" title="3、在Java文件中创建native方法、加载动态库并使用"></a>3、在Java文件中创建native方法、加载动态库并使用</h3><ul>
<li>activity_main.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/activity_main"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"cc.duduhuo.jnidemo.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/tv"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"默认字符串"</span> /&gt;</div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/btn"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>MainActivity.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> TextView tv;</div><div class="line">    <span class="keyword">private</span> Button btn;</div><div class="line"></div><div class="line">    <span class="comment">// 加载动态库</span></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        System.loadLibrary(<span class="string">"test-lib"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 创建native方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">getTextFromCpp</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        tv = (TextView) findViewById(R.id.tv);</div><div class="line">        btn = (Button) findViewById(R.id.btn);</div><div class="line">        btn.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                <span class="comment">// 使用native方法</span></div><div class="line">                tv.setText(getTextFromCpp());</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4、编写C-代码"><a href="#4、编写C-代码" class="headerlink" title="4、编写C++代码"></a>4、编写C++代码</h3><p>首先我们需要在app/src/main目录下创建一个目录(Directory)，名称为“cpp”。<br>之后在cpp目录下创建一个cpp文件(C/C++ Source File)，名称为“test-lib.cpp”。<br>在其中编写如下代码：</p>
<ul>
<li>test-lib.cpp</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span></div><div class="line"><span class="function">jstring</span></div><div class="line"><span class="title">Java_cc_duduhuo_jnidemo_MainActivity_getTextFromCpp</span><span class="params">(</span></div><div class="line">        JNIEnv* env,</div><div class="line">        jobject <span class="comment">/* this */</span>) &#123;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> text = <span class="string">"Text From C++"</span>;</div><div class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(text.c_str());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中<code>jstring</code>是C++函数的返回值类型，<code>Java_cc_duduhuo_jnidemo_MainActivity_getTextFromCpp</code>是函数名称，由Java+包名+类名+native方法名构成。</p>
<h3 id="5、配置app目录下的build-gradle文件"><a href="#5、配置app目录下的build-gradle文件" class="headerlink" title="5、配置app目录下的build.gradle文件"></a>5、配置app目录下的<code>build.gradle</code>文件</h3><p>在<code>defaultConfig</code>节点下添加如下内容：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">externalNativeBuild &#123;</div><div class="line">    cmake &#123;</div><div class="line">        cppFlags <span class="string">""</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在<code>android</code>节点下，添加如下内容：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">externalNativeBuild &#123;</div><div class="line">    cmake &#123;</div><div class="line">        path <span class="string">"CMakeLists.txt"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>完整代码如下：</p>
<ul>
<li>build.gradle</li>
</ul>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">apply plugin: <span class="string">'com.android.application'</span></div><div class="line"></div><div class="line">android &#123;</div><div class="line">    compileSdkVersion <span class="number">24</span></div><div class="line">    buildToolsVersion <span class="string">"25.0.0"</span></div><div class="line">    defaultConfig &#123;</div><div class="line">        applicationId <span class="string">"cc.duduhuo.jnidemo"</span></div><div class="line">        minSdkVersion <span class="number">11</span></div><div class="line">        targetSdkVersion <span class="number">24</span></div><div class="line">        versionCode <span class="number">1</span></div><div class="line">        versionName <span class="string">"1.0"</span></div><div class="line">        testInstrumentationRunner <span class="string">"android.support.test.runner.AndroidJUnitRunner"</span></div><div class="line">        externalNativeBuild &#123;</div><div class="line">            cmake &#123;</div><div class="line">                cppFlags <span class="string">""</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            minifyEnabled <span class="keyword">false</span></div><div class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    externalNativeBuild &#123;</div><div class="line">        cmake &#123;</div><div class="line">            path <span class="string">"CMakeLists.txt"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(dir: <span class="string">'libs'</span>, <span class="keyword">include</span>: [<span class="string">'*.jar'</span>])</div><div class="line">    androidTestCompile(<span class="string">'com.android.support.test.espresso:espresso-core:2.2.2'</span>, &#123;</div><div class="line">        <span class="keyword">exclude</span> <span class="keyword">group</span>: <span class="string">'com.android.support'</span>, module: <span class="string">'support-annotations'</span></div><div class="line">    &#125;)</div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:appcompat-v7:24.2.1'</span></div><div class="line">    testCompile <span class="string">'junit:junit:4.12'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="6、构建项目并运行"><a href="#6、构建项目并运行" class="headerlink" title="6、构建项目并运行"></a>6、构建项目并运行</h3><p>点击“Make Project”，编译完成之后，再点击“Run ‘app’”，运行项目。<br>效果如下图所示：<br><img src="http://img.blog.csdn.net/20161127145009324" alt="Jni_Demo"></p>
<h3 id="7、一些说明"><a href="#7、一些说明" class="headerlink" title="7、一些说明"></a>7、一些说明</h3><p>以debug模式运行项目之后，会在<code>app/build/intermediates/cmake/debug/obj</code>目录下生成各个平台下的so库，名称为<code>libtest-lib.so</code>。<br>Android Studio会将这些平台下的so库全部打包进apk中。</p>
<h3 id="8、代码下载"><a href="#8、代码下载" class="headerlink" title="8、代码下载"></a>8、代码下载</h3><p><a href="http://download.csdn.net/detail/u012939909/9694888" target="_blank" rel="external">Demo代码下载</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;方式1：直接创建包含C-支持的项目&quot;&gt;&lt;a href=&quot;#方式1：直接创建包含C-支持的项目&quot; class=&quot;headerlink&quot; title=&quot;方式1：直接创建包含C++支持的项目&quot;&gt;&lt;/a&gt;方式1：直接创建包含C++支持的项目&lt;/h2&gt;&lt;p&gt;如下图所示，创建
    
    </summary>
    
      <category term="NDK" scheme="/categories/NDK/"/>
    
    
      <category term="Android" scheme="/tags/Android/"/>
    
      <category term="JNI" scheme="/tags/JNI/"/>
    
  </entry>
  
  <entry>
    <title>Splash界面(启动界面)中处理耗时任务</title>
    <link href="/2016/11/26/Splash%E7%95%8C%E9%9D%A2(%E5%90%AF%E5%8A%A8%E7%95%8C%E9%9D%A2)%E4%B8%AD%E5%A4%84%E7%90%86%E8%80%97%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <id>/2016/11/26/Splash界面(启动界面)中处理耗时任务/</id>
    <published>2016-11-25T16:00:00.000Z</published>
    <updated>2017-05-12T08:43:41.184Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、SplashActivity"><a href="#1、SplashActivity" class="headerlink" title="1、SplashActivity"></a>1、SplashActivity</h2><p>将SplashActivity设为Launcher Activity，只需要在<code>AndroidManifest.xml</code>文件中配置SplashActivity的<code>intent-filter</code>如下所示：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--启动界面--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">activity</span></span></div><div class="line">    <span class="attr">android:name</span>=<span class="string">".SplashActivity"</span></div><div class="line">    <span class="attr">android:theme</span>=<span class="string">"@style/FullScreen"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>SplashActivity一般都是全屏显示的，所以需要为其指定一个全屏显示的theme，可以使用如下的style。<br><code>FullScreen</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Base application theme. --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light"</span>&gt;</span><span class="xml"></span></div><div class="line">    <span class="comment">&lt;!-- Customize your theme here. --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>@color/colorPrimaryDark<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/colorAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--全屏--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"FullScreen"</span> <span class="attr">parent</span>=<span class="string">"AppTheme"</span>&gt;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"windowNoTitle"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowFullscreen"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>一般情况下，SplashActivity起到展示产品形象、显示广告、初始化数据的作用。我们需要为其设定一个展示的时间，比如800ms，800ms之后应用将自动跳转到应用主界面并销毁SplashActivity。<br>所以我们可以在SplashActivity的onCreate方法中使用handler的<code>postDelayed()</code>方法来实现在一定时间间隔后执行某个动作的功能。<br>如下面的代码所示。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SplashActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_splash);</div><div class="line">        <span class="keyword">new</span> Handler().postDelayed(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                jump();<span class="comment">// 界面跳转</span></div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="number">800</span>);   <span class="comment">// 停留时间800ms</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 跳转界面</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">jump</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 此处可以根据版本号进行一些判断，再跳转到相应的界面</span></div><div class="line">        startActivity(<span class="keyword">new</span> Intent(<span class="keyword">this</span>, MainActivity.class));</div><div class="line">        finish();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBackPressed</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// Splash界面不允许使用back键</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样就会在800ms之后执行<code>jump()</code>方法，实现Activity跳转并销毁当前的SplashActivity的效果。</p>
<h2 id="2、SplashLoadDataTask"><a href="#2、SplashLoadDataTask" class="headerlink" title="2、SplashLoadDataTask"></a>2、SplashLoadDataTask</h2><p>如果我们需要在应用启动时初始化一些数据，这些数据可以来自文件、数据库或者网络。从文件或数据库中读取大量数据或者从网络中加载数据这些任务都属于耗时任务，显然就不能放在主线程中了。因此我们新建一个继承自<code>AsyncTask</code>的任务类<code>SplashLoadDataTask</code>用于处理这些耗时任务。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SplashLoadDataTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Void</span>, <span class="title">Void</span>, <span class="title">Integer</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> LoadDataCallback callback;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SplashLoadDataTask</span><span class="params">(LoadDataCallback callback)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.callback = callback;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Integer <span class="title">doInBackground</span><span class="params">(Void... params)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> status = <span class="number">0</span>;</div><div class="line">        <span class="comment">// 在此执行耗时任务，可根据任务（数据加载）执行状态给status赋不同的值。</span></div><div class="line">        <span class="comment">// ...</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> status;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Integer status)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onPostExecute(status);</div><div class="line">        <span class="keyword">if</span> (status == <span class="number">0</span>) &#123;</div><div class="line">            callback.loaded();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status == <span class="number">1</span>) &#123;</div><div class="line">            callback.loadError();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 加载数据回调</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LoadDataCallback</span> </span>&#123;</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 数据加载完毕</div><div class="line">         */</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">loaded</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 数据加载出错</div><div class="line">         */</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">loadError</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在SplashActivity中启动这个任务，并在回调方法中进行界面跳转。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SplashActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">SplashLoadDataTask</span>.<span class="title">LoadDataCallback</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_splash);</div><div class="line">        <span class="comment">// 启动加载应用数据任务类</span></div><div class="line">        SplashLoadDataTask task = <span class="keyword">new</span> SplashLoadDataTask(<span class="keyword">this</span>);</div><div class="line">        task.execute();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 跳转界面</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">jump</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> Handler().postDelayed(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="comment">// 此处可以根据版本号进行一些判断，再跳转到相应的界面</span></div><div class="line">                startActivity(<span class="keyword">new</span> Intent(SplashActivity.<span class="keyword">this</span>, MainActivity.class));</div><div class="line">                finish();</div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="number">500</span>);   <span class="comment">// 停留时间500ms</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 数据加载完成</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loaded</span><span class="params">()</span> </span>&#123;</div><div class="line">        jump();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 数据加载出错</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadError</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 进行出错处理</span></div><div class="line">        <span class="comment">// ...</span></div><div class="line"></div><div class="line">        jump();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBackPressed</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// Splash界面不允许使用back键</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此时要注意的是，所谓“停留时间500ms”并不是指Splash界面显示时长是500ms，而是指耗时任务完成后，再过500ms进行界面跳转，所以Splash界面的显示时间应该大于500ms，在实际的开发中应该先估算一下耗时任务执行时长，再确定<code>postDelayed()</code>的延时时长。</p>
<h2 id="3、效果演示"><a href="#3、效果演示" class="headerlink" title="3、效果演示"></a>3、效果演示</h2><p><img src="http://img.blog.csdn.net/20161126144117814" alt="效果演示"></p>
<h2 id="4、Demo代码下载"><a href="#4、Demo代码下载" class="headerlink" title="4、Demo代码下载"></a>4、Demo代码下载</h2><p><a href="http://download.csdn.net/detail/u012939909/9694299" target="_blank" rel="external">Demo代码下载</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、SplashActivity&quot;&gt;&lt;a href=&quot;#1、SplashActivity&quot; class=&quot;headerlink&quot; title=&quot;1、SplashActivity&quot;&gt;&lt;/a&gt;1、SplashActivity&lt;/h2&gt;&lt;p&gt;将SplashActivit
    
    </summary>
    
      <category term="Android基础" scheme="/categories/Android%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Android" scheme="/tags/Android/"/>
    
      <category term="Splash" scheme="/tags/Splash/"/>
    
      <category term="AsyncTask" scheme="/tags/AsyncTask/"/>
    
  </entry>
  
  <entry>
    <title>问题解决：Fragment not attached to Activity</title>
    <link href="/2016/11/26/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%EF%BC%9AFragment%20not%20attached%20to%20Activity/"/>
    <id>/2016/11/26/问题解决：Fragment not attached to Activity/</id>
    <published>2016-11-25T16:00:00.000Z</published>
    <updated>2017-05-12T08:46:09.270Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、问题引入"><a href="#1、问题引入" class="headerlink" title="1、问题引入"></a>1、问题引入</h2><p>在Fragment中执行一段耗时任务，在任务未结束的时候，重建Activity就会导致<code>getActivity()</code>为<code>null</code>，所有用到<code>getActivity()</code>的地方都会引起空指针异常，如果使用了<code>getResources()</code>方法，就会导致<code>Fragment not attached to Activity</code>。</p>
<p>为了重现这一异常，我们编写如下代码：</p>
<ul>
<li>FirstFragment.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> TextView tvMsg;</div><div class="line">    <span class="keyword">private</span> Button btnStartTask, btnRecreate;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"FirstFragment"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FirstFragment</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// Required empty public constructor</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span></div><div class="line">                             Bundle savedInstanceState) &#123;</div><div class="line">        View view = inflater.inflate(R.layout.fragment_first, container, <span class="keyword">false</span>);</div><div class="line">        tvMsg = (TextView) view.findViewById(R.id.tvMsg);</div><div class="line">        btnStartTask = (Button) view.findViewById(R.id.btnStartTask);</div><div class="line">        btnRecreate = (Button) view.findViewById(R.id.btnRecreate);</div><div class="line">        btnStartTask.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        btnRecreate.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (v.getId()) &#123;</div><div class="line">            <span class="keyword">case</span> R.id.btnStartTask:</div><div class="line">                <span class="comment">// 模拟一个耗时任务</span></div><div class="line">                <span class="keyword">new</span> AsyncTask&lt;Void, Void, Void&gt;() &#123;</div><div class="line"></div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">protected</span> Void <span class="title">doInBackground</span><span class="params">(Void... params)</span> </span>&#123;</div><div class="line">                        <span class="keyword">try</span> &#123;</div><div class="line">                            Thread.sleep(<span class="number">2000</span>);</div><div class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                            e.printStackTrace();</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Void aVoid)</span> </span>&#123;</div><div class="line">                        <span class="keyword">super</span>.onPostExecute(aVoid);</div><div class="line">                        Log.d(TAG, <span class="string">"getActivity = "</span> + getActivity());</div><div class="line">                        tvMsg.setText(getResources().getString(R.string.app_name));</div><div class="line">                    &#125;</div><div class="line">                &#125;.execute();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.btnRecreate:</div><div class="line">                <span class="comment">// 重新创建MainActivity</span></div><div class="line">                getActivity().recreate();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>SecondFragment.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SecondFragment</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// Required empty public constructor</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span></div><div class="line">                             Bundle savedInstanceState) &#123;</div><div class="line">        <span class="keyword">return</span> inflater.inflate(R.layout.fragment_second, container, <span class="keyword">false</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>fragment_first.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"cc.duduhuo.fragmentattachdemo.fragment.FirstFragment"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/tvMsg"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"The First Fragment"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/btnStartTask"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"耗时任务"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/btnRecreate"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"重建Activity"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>fragment_second.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"cc.duduhuo.fragmentattachdemo.fragment.SecondFragment"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"The Second Fragment"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>MainActivity.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">FragmentActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> ViewPager mViewPager;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        mViewPager = (ViewPager) <span class="keyword">this</span>.findViewById(R.id.pager);</div><div class="line">        initial();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initial</span><span class="params">()</span> </span>&#123;</div><div class="line">        List&lt;Fragment&gt; fragmentList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        List&lt;String&gt; titleList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        fragmentList.add(<span class="keyword">new</span> FirstFragment());</div><div class="line">        fragmentList.add(<span class="keyword">new</span> SecondFragment());</div><div class="line">        titleList.add(<span class="string">"First"</span>);</div><div class="line">        titleList.add(<span class="string">"Second"</span>);</div><div class="line"></div><div class="line">        MyFragmentPageAdapter adapter = <span class="keyword">new</span> MyFragmentPageAdapter(getSupportFragmentManager(), fragmentList, titleList);</div><div class="line">        mViewPager.setAdapter(adapter);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFragmentPageAdapter</span> <span class="keyword">extends</span> <span class="title">FragmentPagerAdapter</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> List&lt;Fragment&gt; fragmentList;</div><div class="line">        <span class="keyword">private</span> List&lt;String&gt; titleList;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyFragmentPageAdapter</span><span class="params">(FragmentManager fm, List&lt;Fragment&gt; fragmentList, List&lt;String&gt; titleList)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(fm);</div><div class="line">            <span class="keyword">this</span>.fragmentList = fragmentList;</div><div class="line">            <span class="keyword">this</span>.titleList = titleList;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Fragment <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> (fragmentList == <span class="keyword">null</span> || fragmentList.size() == <span class="number">0</span>) ? <span class="keyword">null</span> : fragmentList.get(position);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> CharSequence <span class="title">getPageTitle</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> (titleList.size() &gt; position) ? titleList.get(position) : <span class="string">""</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> fragmentList == <span class="keyword">null</span> ? <span class="number">0</span> : fragmentList.size();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>activity_main.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/activity_main"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"cc.duduhuo.fragmentattachdemo.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v4.view.ViewPager</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/pager"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.v4.view.PagerTabStrip</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_gravity</span>=<span class="string">"top"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.v4.view.ViewPager</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当点击<code>FirstFragment</code>里面的“耗时任务”按钮时，会执行一个2000ms的任务（上面的代码是用休眠2000ms代替一个耗时任务）。如果点过之后静静等待2000ms，上面的<code>TextView</code>的文本就会变成FragmentAttachDemo，并不会报出任何异常。但是当我们点击“耗时任务”按钮之后，在它还未执行完毕时，点击下面的“重建ACTIVITY”按钮，很快程序就会崩溃。</p>
<p>控制台打印出来的信息如下图所示：<br><img src="http://img.blog.csdn.net/20161126221331962" alt="错误信息"></p>
<p>除了点击“重建ACTIVITY”按钮之外，点击“耗时任务”按钮之后立即旋转手机屏幕也会导致此异常，因为默认情况下屏幕旋转也会重建Activity。</p>
<h2 id="2、问题解决"><a href="#2、问题解决" class="headerlink" title="2、问题解决"></a>2、问题解决</h2><p>将<code>FirstFragment</code>中<code>onPostExecute()</code>方法中的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tvMsg.setText(getResources().getString(R.string.app_name));</div></pre></td></tr></table></figure></p>
<p>改为<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (isAdded()) &#123;</div><div class="line">    tvMsg.setText(getResources().getString(R.string.app_name));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>isAdded()</code>方法可以判断当前的<code>Fragment</code>是否已经添加到<code>Activity</code>中，只有当<code>Fragment</code>已经添加到<code>Activity</code>中时才执行<code>getResources()</code>等方法。</p>
<p>另请参考：<a href="http://stackoverflow.com/questions/10919240/fragment-myfragment-not-attached-to-activity" target="_blank" rel="external">http://stackoverflow.com/questions/10919240/fragment-myfragment-not-attached-to-activity</a></p>
<p>当然，以上只是引起该异常的一个例子，并不能解决所有“Fragment not attached to Activity”的问题。</p>
<h2 id="3、代码下载"><a href="#3、代码下载" class="headerlink" title="3、代码下载"></a>3、代码下载</h2><p><a href="http://download.csdn.net/detail/u012939909/9694610" target="_blank" rel="external">Demo代码下载</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、问题引入&quot;&gt;&lt;a href=&quot;#1、问题引入&quot; class=&quot;headerlink&quot; title=&quot;1、问题引入&quot;&gt;&lt;/a&gt;1、问题引入&lt;/h2&gt;&lt;p&gt;在Fragment中执行一段耗时任务，在任务未结束的时候，重建Activity就会导致&lt;code&gt;getAc
    
    </summary>
    
      <category term="问题解决" scheme="/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    
    
      <category term="Android" scheme="/tags/Android/"/>
    
      <category term="Fragment" scheme="/tags/Fragment/"/>
    
  </entry>
  
  <entry>
    <title>Android时间轴(Timeline)效果的实现</title>
    <link href="/2016/11/26/Android%E6%97%B6%E9%97%B4%E8%BD%B4(Timeline)%E6%95%88%E6%9E%9C%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>/2016/11/26/Android时间轴(Timeline)效果的实现/</id>
    <published>2016-11-25T16:00:00.000Z</published>
    <updated>2017-05-12T08:45:07.993Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、时间轴效果"><a href="#1、时间轴效果" class="headerlink" title="1、时间轴效果"></a>1、时间轴效果</h2><p>我们要实现的时间轴效果如下图所示，这是锤子手机的查看物流信息界面的截图。<br><img src="http://img.blog.csdn.net/20161126155452052" alt="物流信息的时间线"></p>
<h2 id="2、主要布局的实现"><a href="#2、主要布局的实现" class="headerlink" title="2、主要布局的实现"></a>2、主要布局的实现</h2><p>在<code>TraceActivity</code>关联的布局文件<code>activity_trace.xml</code>中放置一个<code>ListView</code>，代码如下。由于这个列表只是用于展示信息，并不需要用户去点击，所以将其<code>clickable</code>属性置为<code>false</code>；为了消除<code>ListView</code>点击产生的波纹效果，我们设置其<code>listSelector</code>属性的值为透明；我们不需要列表项之间的分割线，所以设置其<code>divider</code>属性的值为<code>null</code>。</p>
<ul>
<li>activity_trace.xml<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/activity_main"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">    <span class="attr">android:background</span>=<span class="string">"@android:color/white"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"cc.duduhuo.timelinedemo.TraceActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ListView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/lvTrace"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:divider</span>=<span class="string">"@null"</span></div><div class="line">        <span class="attr">android:clickable</span>=<span class="string">"false"</span></div><div class="line">        <span class="attr">android:listSelector</span>=<span class="string">"@android:color/transparent"</span></div><div class="line">        <span class="attr">android:dividerHeight</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>之后再设计每个列表项的布局<code>item_trace.xml</code>，代码如下。由于时间轴的点和线都位于item布局中，为了使线是连续的，所以设置上面<code>ListView</code>的<code>dividerHeight</code>属性值为<code>0dp</code>，即垂直方向每个列表项都是紧挨着的。在item的布局中，我们先使用<code>LinearLayout</code>将布局分成左右两个部分，左边就是时间轴的布局，右边是物流信息的布局。</p>
<p>先说物流信息的布局，物流信息是一个<code>RelativeLayout</code>，其内放置两个<code>TextView</code>分别用于承载物流信息的时间的描述的显示，为了不使两个列表项的文本靠得太近，我们在<code>RelativeLayout</code>中设置其<code>paddingBottom</code>和<code>paddingTop</code>属性。</p>
<p>再说时间轴的布局，时间轴的布局也是一个<code>RelativeLayout</code>，但是不设置其<code>padding</code>属性，宽度为32dp。为了使时间轴的圆点和显示时间的文本对齐，我们需要在圆点之上再放置一条竖线，所以整体的布局就是 <code>线 - 点 - 线</code>。为了让线可以正好对准圆点的中心，我们让线和点都水平居中，即<code>android:layout_centerHorizontal=”true”</code>。</p>
<ul>
<li>item_trace.xml<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/rlTimeline"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"32dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/tvTopLine"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"0.5dp"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"12dp"</span></div><div class="line">            <span class="attr">android:layout_centerHorizontal</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"#999"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/tvDot"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"5dp"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"5dp"</span></div><div class="line">            <span class="attr">android:layout_below</span>=<span class="string">"@id/tvTopLine"</span></div><div class="line">            <span class="attr">android:layout_centerHorizontal</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"@drawable/timelline_dot_normal"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"0.5dp"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_below</span>=<span class="string">"@id/tvDot"</span></div><div class="line">            <span class="attr">android:layout_centerHorizontal</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"#999"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/rlCenter"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:paddingBottom</span>=<span class="string">"6dp"</span></div><div class="line">        <span class="attr">android:paddingRight</span>=<span class="string">"10dp"</span></div><div class="line">        <span class="attr">android:paddingTop</span>=<span class="string">"6dp"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/tvAcceptTime"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"2014/06/24 20:55:28"</span></div><div class="line">            <span class="attr">android:textColor</span>=<span class="string">"#999"</span></div><div class="line">            <span class="attr">android:textSize</span>=<span class="string">"12sp"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/tvAcceptStation"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_below</span>=<span class="string">"@id/tvAcceptTime"</span></div><div class="line">            <span class="attr">android:layout_marginTop</span>=<span class="string">"5dp"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"快件在 深圳 ,准备送往下一站 深圳集散中心 [深圳市]"</span></div><div class="line">            <span class="attr">android:textColor</span>=<span class="string">"#999"</span></div><div class="line">            <span class="attr">android:textSize</span>=<span class="string">"12sp"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>圆点的背景资源如下代码：</p>
<ul>
<li><p>timelline_dot_first.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">shape</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:shape</span>=<span class="string">"oval"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">size</span></span></div><div class="line">        <span class="attr">android:width</span>=<span class="string">"10dp"</span></div><div class="line">        <span class="attr">android:height</span>=<span class="string">"10dp"</span> /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"#555555"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>timelline_dot_normal.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">shape</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:shape</span>=<span class="string">"oval"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">size</span></span></div><div class="line">        <span class="attr">android:width</span>=<span class="string">"10dp"</span></div><div class="line">        <span class="attr">android:height</span>=<span class="string">"10dp"</span> /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"#999999"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="3、Activity"><a href="#3、Activity" class="headerlink" title="3、Activity"></a>3、Activity</h2><p>为了可以看到布局的效果，我们在<code>TraceActivity</code>中模拟一些假数据。需要定义一个实体类<code>Trace</code>，它有两个属性，<code>acceptTime</code>和<code>acceptStation</code>，代码如下：</p>
<ul>
<li>Trace.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Trace</span> </span>&#123;</div><div class="line">    <span class="comment">/** 时间 */</span></div><div class="line">    <span class="keyword">private</span> String acceptTime;</div><div class="line">    <span class="comment">/** 描述 */</span></div><div class="line">    <span class="keyword">private</span> String acceptStation;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Trace</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Trace</span><span class="params">(String acceptTime, String acceptStation)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.acceptTime = acceptTime;</div><div class="line">        <span class="keyword">this</span>.acceptStation = acceptStation;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAcceptTime</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> acceptTime;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAcceptTime</span><span class="params">(String acceptTime)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.acceptTime = acceptTime;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAcceptStation</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> acceptStation;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAcceptStation</span><span class="params">(String acceptStation)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.acceptStation = acceptStation;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>TraceActivity.java<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TraceActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ListView lvTrace;</div><div class="line">    <span class="keyword">private</span> List&lt;Trace&gt; traceList = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10</span>);</div><div class="line">    <span class="keyword">private</span> TraceListAdapter adapter;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_trace);</div><div class="line">        findView();</div><div class="line">        initData();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">findView</span><span class="params">()</span> </span>&#123;</div><div class="line">        lvTrace = (ListView) findViewById(R.id.lvTrace);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 模拟一些假的数据</span></div><div class="line">        traceList.add(<span class="keyword">new</span> Trace(<span class="string">"2016-05-25 17:48:00"</span>, <span class="string">"[沈阳市] [沈阳和平五部]的派件已签收 感谢使用中通快递,期待再次为您服务!"</span>));</div><div class="line">        traceList.add(<span class="keyword">new</span> Trace(<span class="string">"2016-05-25 14:13:00"</span>, <span class="string">"[沈阳市] [沈阳和平五部]的东北大学代理点正在派件 电话:18040xxxxxx 请保持电话畅通、耐心等待"</span>));</div><div class="line">        traceList.add(<span class="keyword">new</span> Trace(<span class="string">"2016-05-25 13:01:04"</span>, <span class="string">"[沈阳市] 快件到达 [沈阳和平五部]"</span>));</div><div class="line">        traceList.add(<span class="keyword">new</span> Trace(<span class="string">"2016-05-25 12:19:47"</span>, <span class="string">"[沈阳市] 快件离开 [沈阳中转]已发往[沈阳和平五部]"</span>));</div><div class="line">        traceList.add(<span class="keyword">new</span> Trace(<span class="string">"2016-05-25 11:12:44"</span>, <span class="string">"[沈阳市] 快件到达 [沈阳中转]"</span>));</div><div class="line">        traceList.add(<span class="keyword">new</span> Trace(<span class="string">"2016-05-24 03:12:12"</span>, <span class="string">"[嘉兴市] 快件离开 [杭州中转部]已发往[沈阳中转]"</span>));</div><div class="line">        traceList.add(<span class="keyword">new</span> Trace(<span class="string">"2016-05-23 21:06:46"</span>, <span class="string">"[杭州市] 快件到达 [杭州汽运部]"</span>));</div><div class="line">        traceList.add(<span class="keyword">new</span> Trace(<span class="string">"2016-05-23 18:59:41"</span>, <span class="string">"[杭州市] 快件离开 [杭州乔司区]已发往[沈阳]"</span>));</div><div class="line">        traceList.add(<span class="keyword">new</span> Trace(<span class="string">"2016-05-23 18:35:32"</span>, <span class="string">"[杭州市] [杭州乔司区]的市场部已收件 电话:18358xxxxxx"</span>));</div><div class="line">        adapter = <span class="keyword">new</span> TraceListAdapter(<span class="keyword">this</span>, traceList);</div><div class="line">        lvTrace.setAdapter(adapter);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="4、Adapter"><a href="#4、Adapter" class="headerlink" title="4、Adapter"></a>4、Adapter</h2><p>需要为<code>ListView</code>设置一个Adapter。定义一个<code>TraceListAdapter</code>，代码如下。由于第一行的物流信息的显示形式和其他的不一样，所以把item分成两个类型，<code>TYPE_TOP </code>指第一行的item，<code>TYPE_NORMAL</code>指其他的item。区别在于，第一行的item的时间轴布局中最上面的线不显示，而且文字颜色和圆点的颜色较深。其余item文字颜色和圆点颜色稍浅一些，而且<code>线 - 点 - 线</code>也全都显示。</p>
<ul>
<li>TraceListAdapter.java<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TraceListAdapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Context context;</div><div class="line">    <span class="keyword">private</span> List&lt;Trace&gt; traceList = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">1</span>);</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_TOP = <span class="number">0x0000</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_NORMAL= <span class="number">0x0001</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TraceListAdapter</span><span class="params">(Context context, List&lt;Trace&gt; traceList)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.context = context;</div><div class="line">        <span class="keyword">this</span>.traceList = traceList;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> traceList.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Trace <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> traceList.get(position);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getItemId</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> position;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</div><div class="line">        ViewHolder holder;</div><div class="line">        <span class="keyword">final</span> Trace trace = getItem(position);</div><div class="line">        <span class="keyword">if</span> (convertView != <span class="keyword">null</span>) &#123;</div><div class="line">            holder = (ViewHolder) convertView.getTag();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            holder = <span class="keyword">new</span> ViewHolder();</div><div class="line">            convertView = LayoutInflater.from(context).inflate(R.layout.item_trace, parent, <span class="keyword">false</span>);</div><div class="line">            holder.tvAcceptTime = (TextView) convertView.findViewById(R.id.tvAcceptTime);</div><div class="line">            holder.tvAcceptStation = (TextView) convertView.findViewById(R.id.tvAcceptStation);</div><div class="line">            holder.tvTopLine = (TextView) convertView.findViewById(R.id.tvTopLine);</div><div class="line">            holder.tvDot = (TextView) convertView.findViewById(R.id.tvDot);</div><div class="line">            convertView.setTag(holder);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (getItemViewType(position) == TYPE_TOP) &#123;</div><div class="line">            <span class="comment">// 第一行头的竖线不显示</span></div><div class="line">            holder.tvTopLine.setVisibility(View.INVISIBLE);</div><div class="line">            <span class="comment">// 字体颜色加深</span></div><div class="line">            holder.tvAcceptTime.setTextColor(<span class="number">0xff555555</span>);</div><div class="line">            holder.tvAcceptStation.setTextColor(<span class="number">0xff555555</span>);</div><div class="line">            holder.tvDot.setBackgroundResource(R.drawable.timelline_dot_first);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (getItemViewType(position) == TYPE_NORMAL) &#123;</div><div class="line">            holder.tvTopLine.setVisibility(View.VISIBLE);</div><div class="line">            holder.tvAcceptTime.setTextColor(<span class="number">0xff999999</span>);</div><div class="line">            holder.tvAcceptStation.setTextColor(<span class="number">0xff999999</span>);</div><div class="line">            holder.tvDot.setBackgroundResource(R.drawable.timelline_dot_normal);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        holder.tvAcceptTime.setText(trace.getAcceptTime());</div><div class="line">        holder.tvAcceptStation.setText(trace.getAcceptStation());</div><div class="line">        <span class="keyword">return</span> convertView;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemViewType</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (id == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> TYPE_TOP;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> TYPE_NORMAL;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> </span>&#123;</div><div class="line">        <span class="keyword">public</span> TextView tvAcceptTime, tvAcceptStation;</div><div class="line">        <span class="keyword">public</span> TextView tvTopLine, tvDot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="5、效果展示"><a href="#5、效果展示" class="headerlink" title="5、效果展示"></a>5、效果展示</h2><p><img src="http://img.blog.csdn.net/20161126165230733" alt="Trace_Demo"></p>
<h2 id="6、代码下载"><a href="#6、代码下载" class="headerlink" title="6、代码下载"></a>6、代码下载</h2><p><a href="http://download.csdn.net/detail/u012939909/9694387" target="_blank" rel="external">Demo代码下载</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、时间轴效果&quot;&gt;&lt;a href=&quot;#1、时间轴效果&quot; class=&quot;headerlink&quot; title=&quot;1、时间轴效果&quot;&gt;&lt;/a&gt;1、时间轴效果&lt;/h2&gt;&lt;p&gt;我们要实现的时间轴效果如下图所示，这是锤子手机的查看物流信息界面的截图。&lt;br&gt;&lt;img src=&quot;
    
    </summary>
    
      <category term="View" scheme="/categories/View/"/>
    
    
      <category term="Android" scheme="/tags/Android/"/>
    
      <category term="View" scheme="/tags/View/"/>
    
      <category term="Timeline" scheme="/tags/Timeline/"/>
    
  </entry>
  
  <entry>
    <title>自定义一个可以即时显示的Toast的工具类库</title>
    <link href="/2016/11/25/%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E5%8F%AF%E4%BB%A5%E5%8D%B3%E6%97%B6%E6%98%BE%E7%A4%BA%E7%9A%84Toast%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%BA%93/"/>
    <id>/2016/11/25/自定义一个可以即时显示的Toast的工具类库/</id>
    <published>2016-11-24T16:00:00.000Z</published>
    <updated>2017-05-12T08:42:29.212Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-AppToast介绍"><a href="#1-AppToast介绍" class="headerlink" title="1 AppToast介绍"></a>1 AppToast介绍</h2><h3 id="1-1-实现方式"><a href="#1-1-实现方式" class="headerlink" title="1.1 实现方式"></a>1.1 实现方式</h3><p>全局只有一个Toast实例，每次调用<code>show()</code>方法显示Toast前都要先取消上次的Toast显示，然后显示本次的消息。  </p>
<p>首先创建一个名为AppToast的类，在里面定义一个全局静态Toast对象和一个全局Application对象的弱引用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Toast toast = <span class="keyword">null</span>;  <span class="comment">// Global Toast</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> WeakReference&lt;Application&gt; app;</div></pre></td></tr></table></figure></p>
<p>定义一个<code>init()</code>方法，用于得到用户传入的Application实例。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Application application)</span> </span>&#123;</div><div class="line">    app = <span class="keyword">new</span> WeakReference&lt;Application&gt;(application);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>封装<code>showToast()</code>方法，方便调用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Display Toast</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> resId The resource id of the string resource to use.  Can be formatted text.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showToast</span><span class="params">(@StringRes <span class="keyword">int</span> resId)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (toast != <span class="keyword">null</span>) &#123;</div><div class="line">        toast.cancel();</div><div class="line">        toast = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    toast = Toast.makeText(app.get(), resId, LENGTH_SHORT);</div><div class="line">    toast.show();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>也可以封装一个<code>getToast()</code>方法用于得到Toast实例，允许我们设置其属性，便于自定义Toast显示的效果。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Get a Toast object &lt;br&gt;</div><div class="line"> * Need to call show() method to be displayed</div><div class="line"> *</div><div class="line"> * <span class="doctag">@return</span> Toast object.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Toast <span class="title">getToast</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (toast != <span class="keyword">null</span>) &#123;</div><div class="line">        toast.cancel();</div><div class="line">        toast = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    toast = Toast.makeText(app.get(), <span class="string">""</span>, Toast.LENGTH_SHORT);</div><div class="line">    <span class="keyword">return</span> toast;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="1-2-使用方法"><a href="#1-2-使用方法" class="headerlink" title="1.2 使用方法"></a>1.2 使用方法</h3><p>首先创建一个类继承自<code>Application</code>，在其<code>onCreate()</code>方法中调用我们之前写的<code>init()</code>方法进行AppToast类的初始化。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        <span class="comment">// 初始化AppToast库</span></div><div class="line">        AppToast.init(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：不要忘记在AndroidManifest.xml文件中的application节点下配置android:name属性。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">application</span></span></div><div class="line">    <span class="attr">...</span></div><div class="line">    <span class="attr">android:name</span>=<span class="string">".MyApplication"</span> &gt;</div><div class="line">    <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span> &gt;</span></div><div class="line">        ...</div><div class="line">    <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></div></pre></td></tr></table></figure>
<p>之后就可以在代码中进行使用了，比如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AppToast.showToast(R.string.toast2);</div></pre></td></tr></table></figure></p>
<p>和<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Toast toast = AppToast.getToast();</div><div class="line">toast.setGravity(Gravity.TOP | Gravity.CENTER, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">toast.setText(<span class="string">"自定义Toast"</span>);</div><div class="line">toast.setDuration(Toast.LENGTH_SHORT);</div><div class="line">toast.show();</div></pre></td></tr></table></figure></p>
<p>显示效果如下图：<br><img src="http://img.blog.csdn.net/20161125215420046" alt="显示效果"></p>
<p>开源库、样例工程、详细文档下载地址：<br><a href="https://github.com/liying2008/ApplicationToast" target="_blank" rel="external">liying2008/ApplicationToast</a></p>
<p>该库已上传至jcenter仓库，使用Android Studio可以通过在线依赖引用的方式引入该库。<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">  <span class="keyword">compile</span> <span class="string">'cc.duduhuo.applicationtoast:applicationtoast:0.3'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="2-CusToast介绍"><a href="#2-CusToast介绍" class="headerlink" title="2 CusToast介绍"></a>2 CusToast介绍</h2><h3 id="2-1-功能介绍"><a href="#2-1-功能介绍" class="headerlink" title="2.1 功能介绍"></a>2.1 功能介绍</h3><p>CusToast是一个具有即时显示并且内置了10种样式的Toast工具库，现在简单介绍其实现原理。<br>在CusToast类中定义了一个枚举类型Style，即Toast显示的样式。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Style &#123;</div><div class="line">    DEFAULT,</div><div class="line">    LIGHT_BLUE,</div><div class="line">    BLUE,</div><div class="line">    LIGHT_RED,</div><div class="line">    RED,</div><div class="line">    LIGHT_GREEN,</div><div class="line">    GREEN,</div><div class="line">    LIGHT_YELLOW,</div><div class="line">    YELLOW,</div><div class="line">    GRAY_1</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>为了方便对Toast对象进行操作，我们创建一个自定义的Toast类，其继承自Toast，方便我们扩展Toast的功能，比如显示带图片的Toast和显示带副标题的Toast。<br>通过向<code>DToast</code>类的<code>setView()</code>方法传入样式名，得到不同样式的<code>DToast</code>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Add a view to CusToast.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> application this application.</div><div class="line"> * <span class="doctag">@param</span> style       the style of CusToast.</div><div class="line"> * <span class="doctag">@return</span> current instance.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> DToast <span class="title">setView</span><span class="params">(Application application, CusToast.Style style)</span> </span>&#123;</div><div class="line">    dView = View.inflate(application, R.layout.ddh_cus_toast, <span class="keyword">null</span>);</div><div class="line">    dText = (TextView) dView.findViewById(R.id.dText);</div><div class="line">    setStyle(style);</div><div class="line">    <span class="keyword">super</span>.setView(dView);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其余方法和布局文件请参考文末链接。</p>
<p><code>CusToast</code>类中的<code>showToast()</code>方法如下所示。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Display Toast.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> text The resource id of the string resource to use.  Can be formatted text.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showToast</span><span class="params">(@StringRes <span class="keyword">int</span> text)</span> </span>&#123;</div><div class="line">    clearToast();</div><div class="line">    toast = <span class="keyword">new</span> DToast(app.get());</div><div class="line">    toast.setView(app.get(), defStyle);</div><div class="line">    toast.setText(text);</div><div class="line">    toast.setDuration(Toast.LENGTH_SHORT);</div><div class="line">    toast.show();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>clearToast()</code>方法如下，目的就是立即取消正在显示的“旧”Toast。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Clear an existing CusToast.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clearToast</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (toast != <span class="keyword">null</span>) &#123;</div><div class="line">        toast.cancel();</div><div class="line">        toast = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="2-2-使用方法"><a href="#2-2-使用方法" class="headerlink" title="2.2 使用方法"></a>2.2 使用方法</h3><p>首先，和AppToast一样，在自己项目的<code>Application</code>类中初始化<code>CusToast</code>库，方法也和AppToast类似。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        <span class="comment">// 初始化CusToast库（两种方式选其一）</span></div><div class="line">        <span class="comment">// 方式1：初始化同时指定CusToast的默认显示样式</span></div><div class="line">        CusToast.init(<span class="keyword">this</span>, CusToast.Style.RED);</div><div class="line">        <span class="comment">// 方式2：初始化，使用默认显示样式</span></div><div class="line">        <span class="comment">// CusToast.init(this);</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>之后就可以在代码中进行使用了，比如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CusToast.showToast(<span class="string">"Toast 1"</span>);</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CusToast.showToast(<span class="string">"Toast 3"</span>, Toast.LENGTH_LONG, CusToast.Style.LIGHT_RED);</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">DToast toast = CusToast.getToast(<span class="string">"自定义Toast"</span>);</div><div class="line">toast.setCusToastGravity(Gravity.CENTER, <span class="number">0</span>, <span class="number">0</span>)</div><div class="line">        .setTextSize(<span class="number">16</span>)</div><div class="line">        .setStyle(CusToast.Style.GRAY_1)</div><div class="line">        .setTextColor(Color.WHITE)</div><div class="line">        <span class="comment">// .setBackground(R.mipmap.ic_launcher)</span></div><div class="line">        <span class="comment">// .setBackgroundColor(0xffff3444)</span></div><div class="line">        .setCusToastDuration(Toast.LENGTH_SHORT)</div><div class="line">        .show();</div></pre></td></tr></table></figure>
<p>在此列举一下CusToast的几种内置样式。</p>
<table>
<thead>
<tr>
<th style="text-align:center">Style</th>
<th style="text-align:center">预览</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">DEFAULT</td>
<td style="text-align:center"><img src="https://github.com/liying2008/CusToast/raw/master/pic/style_default.png" alt="DEFAULT"></td>
</tr>
<tr>
<td style="text-align:center">LIGHT_BLUE</td>
<td style="text-align:center"><img src="https://github.com/liying2008/CusToast/raw/master/pic/style_lightblue.png" alt="LIGHT_BLUE"></td>
</tr>
<tr>
<td style="text-align:center">BLUE</td>
<td style="text-align:center"><img src="https://github.com/liying2008/CusToast/raw/master/pic/style_blue.png" alt="BLUE"></td>
</tr>
<tr>
<td style="text-align:center">LIGHT_RED</td>
<td style="text-align:center"><img src="https://github.com/liying2008/CusToast/raw/master/pic/style_lightred.png" alt="LIGHT_RED"></td>
</tr>
<tr>
<td style="text-align:center">RED</td>
<td style="text-align:center"><img src="https://github.com/liying2008/CusToast/raw/master/pic/style_red.png" alt="RED"></td>
</tr>
<tr>
<td style="text-align:center">LIGHT_GREEN</td>
<td style="text-align:center"><img src="https://github.com/liying2008/CusToast/raw/master/pic/style_lightgreen.png" alt="LIGHT_GREEN"></td>
</tr>
<tr>
<td style="text-align:center">GREEN</td>
<td style="text-align:center"><img src="https://github.com/liying2008/CusToast/raw/master/pic/style_green.png" alt="GREEN"></td>
</tr>
<tr>
<td style="text-align:center">LIGHT_YELLOW</td>
<td style="text-align:center"><img src="https://github.com/liying2008/CusToast/raw/master/pic/style_lightyellow.png" alt="LIGHT_YELLOW"></td>
</tr>
<tr>
<td style="text-align:center">YELLOW</td>
<td style="text-align:center"><img src="https://github.com/liying2008/CusToast/raw/master/pic/style_yellow.png" alt="YELLOW"></td>
</tr>
<tr>
<td style="text-align:center">GRAY_1</td>
<td style="text-align:center"><img src="https://github.com/liying2008/CusToast/raw/master/pic/style_gray1.png" alt="GRAY_1"></td>
</tr>
</tbody>
</table>
<p><strong>其他样式</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">样式</th>
<th style="text-align:center">预览</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">CusToastWithSub</td>
<td style="text-align:center"><img src="https://github.com/liying2008/CusToast/raw/master/pic/custoast_with_sub.png" alt="CusToastWithSub"></td>
</tr>
<tr>
<td style="text-align:center">CusToastWithIcon</td>
<td style="text-align:center"><img src="https://github.com/liying2008/CusToast/raw/master/pic/custoast_with_icon.png" alt="CusToastWithIcon"></td>
</tr>
</tbody>
</table>
<p>开源库、样例工程、详细文档下载地址：<br><a href="https://github.com/liying2008/CusToast" target="_blank" rel="external">liying2008/CusToast</a></p>
<p>该库已上传至jcenter仓库，使用Android Studio可以通过在线依赖引用的方式引入该库。<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">  <span class="keyword">compile</span> <span class="string">'cc.duduhuo.custoast:custoast:0.2'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-AppToast介绍&quot;&gt;&lt;a href=&quot;#1-AppToast介绍&quot; class=&quot;headerlink&quot; title=&quot;1 AppToast介绍&quot;&gt;&lt;/a&gt;1 AppToast介绍&lt;/h2&gt;&lt;h3 id=&quot;1-1-实现方式&quot;&gt;&lt;a href=&quot;#1-1-实
    
    </summary>
    
      <category term="我的开源" scheme="/categories/%E6%88%91%E7%9A%84%E5%BC%80%E6%BA%90/"/>
    
    
      <category term="Android" scheme="/tags/Android/"/>
    
      <category term="Toast" scheme="/tags/Toast/"/>
    
      <category term="Library" scheme="/tags/Library/"/>
    
  </entry>
  
  <entry>
    <title>使用coding进行项目代码管理（全程可视化操作！）</title>
    <link href="/2016/08/27/%E4%BD%BF%E7%94%A8coding%E8%BF%9B%E8%A1%8C%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%EF%BC%88%E5%85%A8%E7%A8%8B%E5%8F%AF%E8%A7%86%E5%8C%96%E6%93%8D%E4%BD%9C%EF%BC%81%EF%BC%89/"/>
    <id>/2016/08/27/使用coding进行项目代码管理（全程可视化操作！）/</id>
    <published>2016-08-26T16:00:00.000Z</published>
    <updated>2017-05-12T08:41:15.224Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第1步-下载并安装git"><a href="#第1步-下载并安装git" class="headerlink" title="第1步 下载并安装git"></a>第1步 下载并安装git</h2><p>下载地址：<a href="https://git-scm.com/" target="_blank" rel="external">https://git-scm.com/</a><br>下载及安装过程略。</p>
<h2 id="第2步-注册coding帐号"><a href="#第2步-注册coding帐号" class="headerlink" title="第2步 注册coding帐号"></a>第2步 注册coding帐号</h2><p>coding官网：<a href="https://coding.net" target="_blank" rel="external">https://coding.net</a><br>注册完毕之后，需要到邮箱点击激活邮件中的链接验证邮箱。<br>具体过程略。  </p>
<h2 id="第3步-在coding中创建一个项目"><a href="#第3步-在coding中创建一个项目" class="headerlink" title="第3步 在coding中创建一个项目"></a>第3步 在coding中创建一个项目</h2><p>在如下界面创建项目。</p>
<p><img src="http://img.blog.csdn.net/20160827133222938" alt="创建项目"></p>
<p>创建完成之后，会得到一个git地址，点击右面的图标可以复制地址，如下：  </p>
<p><img src="http://img.blog.csdn.net/20160827133437807" alt="git地址"></p>
<p>项目创建完成之后，可以添加项目成员，被添加的成员都可以访问到你的项目。</p>
<h2 id="第4步-在本地创建仓库"><a href="#第4步-在本地创建仓库" class="headerlink" title="第4步 在本地创建仓库"></a>第4步 在本地创建仓库</h2><p>安装完git后，右键菜单会多出两个条目，如图：</p>
<p><img src="http://img.blog.csdn.net/20160827134032176" alt="GIT GUI"></p>
<p>选择Git GUI Here，调出git工具的可视化窗口。</p>
<p><img src="http://img.blog.csdn.net/20160827134134270" alt="create new repository"></p>
<p>指定创建的文件夹名称。（这个文件夹必须不存在，之后会说如何将一个已经存在的文件夹链接到远程仓库）</p>
<p><img src="http://img.blog.csdn.net/20160827134355677" alt="填写文件夹名字"></p>
<p>点击“Create”之后，git会在你指定的目录下创建一个文件夹，里面有一个.git的隐藏文件夹。<br>进入到创建的文件夹中，将你的代码或其他文件放进来。</p>
<h2 id="第5步-链接到远程仓库"><a href="#第5步-链接到远程仓库" class="headerlink" title="第5步 链接到远程仓库"></a>第5步 链接到远程仓库</h2><p>我们在Git GUI中点击“Remote”菜单下的“Add”选项，进入如下界面。</p>
<p><img src="http://img.blog.csdn.net/20160827140020530" alt="填写远程仓库信息"></p>
<p>Name是自己起的远程仓库的名字，Location就是之前在coding上复制的git地址，填写完毕，点击“Add”，出现如下界面代表链接完成。（第一次使用时应该会弹出一个对话框让你填写coding的用户名和密码）</p>
<p><img src="http://img.blog.csdn.net/20160827140334563" alt="链接完成"></p>
<h2 id="第6步-更改配置信息（用户名和邮箱）"><a href="#第6步-更改配置信息（用户名和邮箱）" class="headerlink" title="第6步 更改配置信息（用户名和邮箱）"></a>第6步 更改配置信息（用户名和邮箱）</h2><p>我们在Git GUI中点击“Edit”菜单下的“Options”选项，进入git配置界面。</p>
<p><img src="http://img.blog.csdn.net/20160827134929906" alt="进入配置界面"></p>
<p>在如下界面填写你的配置，主要填写User Name和Email Address，还有更改默认文件编码为utf-8，其他选项默认即可。</p>
<p><img src="http://img.blog.csdn.net/20160907211730129" alt="填写配置"></p>
<p>填写完毕，点击“Save”。</p>
<h2 id="第7步-Commit"><a href="#第7步-Commit" class="headerlink" title="第7步 Commit"></a>第7步 Commit</h2><p>界面如下图。</p>
<p><img src="http://img.blog.csdn.net/20160827140256376" alt="commit"></p>
<p>相关说明已经在图中标出，此处不再细说。  </p>
<p>有时候在团队合作开发的时候，我们需要创建自己的分支，用来归类自己提交的代码。此时我们需要使用到界面下方生成的那一段字符串，它是用来标记本次的提交记录的。</p>
<h2 id="可选-创建分支"><a href="#可选-创建分支" class="headerlink" title="可选 创建分支"></a>可选 创建分支</h2><p>我们在Git GUI中点击“Branch”菜单下的“Create”选项，进入创建分支界面，如下图。</p>
<p><img src="http://img.blog.csdn.net/20160827141906381" alt="创建分支"></p>
<p>填写“Name”(分支名称)和Revision Expression，点击“Create”即可创建。</p>
<h2 id="第8步-Push"><a href="#第8步-Push" class="headerlink" title="第8步 Push"></a>第8步 Push</h2><p>在Git GUI主界面点击“Push”按钮，可以将本地仓库的代码提交到远程仓库。</p>
<p><img src="http://img.blog.csdn.net/20160827142256965" alt="点击Push"></p>
<p>选择分支，然后“Push”。</p>
<p><img src="http://img.blog.csdn.net/20160827142625432" alt="填写远程仓库信息"></p>
<p>当出现如下界面代表已经Push完成。  </p>
<p><img src="http://img.blog.csdn.net/20160827142959101" alt="Push完成"></p>
<hr>
<h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>将已经存在的文件夹链接到远端仓库。<br>在该文件夹中点右键，选择Git Bash Here</p>
<p>使用两条命令：git init 和 git remote add<br>如图所示。</p>
<p><img src="http://img.blog.csdn.net/20160827143840425" alt="git bash"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第1步-下载并安装git&quot;&gt;&lt;a href=&quot;#第1步-下载并安装git&quot; class=&quot;headerlink&quot; title=&quot;第1步 下载并安装git&quot;&gt;&lt;/a&gt;第1步 下载并安装git&lt;/h2&gt;&lt;p&gt;下载地址：&lt;a href=&quot;https://git-scm.
    
    </summary>
    
      <category term="相关技能" scheme="/categories/%E7%9B%B8%E5%85%B3%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="Git" scheme="/tags/Git/"/>
    
      <category term="Coding" scheme="/tags/Coding/"/>
    
      <category term="GitGui" scheme="/tags/GitGui/"/>
    
  </entry>
  
  <entry>
    <title>Android中接口(Interface)的简单使用</title>
    <link href="/2016/08/20/Android%E4%B8%AD%E6%8E%A5%E5%8F%A3(Interface)%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>/2016/08/20/Android中接口(Interface)的简单使用/</id>
    <published>2016-08-19T16:00:00.000Z</published>
    <updated>2017-05-13T00:37:09.930Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Java中的接口可以被看作是<code>只包含常量和抽象方法的抽象类</code>  。</p>
</blockquote>
<p> 可以使用如下方式定义一个接口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InterfaceDemo</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">10</span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">method2</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用1：-解决“多重继承”的问题"><a href="#使用1：-解决“多重继承”的问题" class="headerlink" title="使用1： 解决“多重继承”的问题"></a>使用1： 解决“多重继承”的问题</h2><p>Java语言本身是不支持类的多重继承(多重继承是指一个类从多个类继承而来，即一个类拥有多个超类)的，但一个类却可以实现多个接口。这样，我们可以将一些抽象方法定义在接口中，间接地达到多重继承的目的。<br>例如：</p>
<ul>
<li><code>MyInterface1.java</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterface1</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>MyInterface2.java</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterface2</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>Bird.java</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bird</span> <span class="keyword">implements</span> <span class="title">MyInterface1</span>, <span class="title">MyInterface2</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"Bird"</span>;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.i(TAG, <span class="string">"I can fly"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.i(TAG, <span class="string">"I can walk"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用2：-定义一个规范（协议）"><a href="#使用2：-定义一个规范（协议）" class="headerlink" title="使用2： 定义一个规范（协议）"></a>使用2： 定义一个规范（协议）</h2><p>同一个接口可以有多个不同的实现类，但每一个实现类都必须重写接口中所有的抽象方法。即接口不考虑这些实现类各自采用什么方式实现这些功能，但它要求所有的实现类都必须有这些功能。<br>例如：<br>首先定义一个计算器的接口：<code>Calculator.java</code>,所有实现该接口的类，都必须具有计算两个数相加、相减、相乘、相除的功能。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Calculator</span> </span>&#123;</div><div class="line">    <span class="comment">/** 计算器可以计算两个数的和 */</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</div><div class="line">    <span class="comment">/** 计算器可以计算两个数的差 */</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</div><div class="line">    <span class="comment">/** 计算器可以计算两个数的积 */</span></div><div class="line">    <span class="function"><span class="keyword">long</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</div><div class="line">    <span class="comment">/** 计算器可以计算两个数的商 */</span></div><div class="line">    <span class="function"><span class="keyword">float</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再定义一个实现该接口的类<code>ACalculator.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ACalculator</span> <span class="keyword">implements</span> <span class="title">Calculator</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> a + b;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> a - b;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> a * b;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">float</span>) a / (<span class="keyword">float</span>) b;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在其他类中使用ACalculator进行两数之和的计算。其他类并不需要了解ACalculator是通过什么方式计算的，只需要了解Calculator接口中的相关方法定义即可。  </p>
<p><code>Test.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Calculator calculator = <span class="keyword">new</span> ACalculator();</div><div class="line">        <span class="keyword">int</span> sum = calculator.add(<span class="number">12</span>, <span class="number">14</span>);</div><div class="line">        System.out.println(<span class="string">"sum = "</span> + sum);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用3：-用于回调"><a href="#使用3：-用于回调" class="headerlink" title="使用3： 用于回调"></a>使用3： 用于回调</h2><p>我们知道，一般情况下主线程是不执行耗时任务的，如果遇到一些耗时任务（如网络请求，文件读写，数据库读写等等），我们会将其放入子线程中去执行，当执行完毕后，子线程再将执行结果返回给主线程。这个过程就是回调。</p>
<p>看一个例子。<br>首先定义一个回调接口。</p>
<p><code>OnInfoFetchCallback.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnInfoFetchCallback</span> </span>&#123;</div><div class="line">    <span class="comment">/** 获取信息成功 */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(String info)</span></span>;</div><div class="line">    <span class="comment">/** 获取信息失败 */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">failure</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再定义一个用于获取信息的任务类，在这个类中我们执行一些耗时操作。  </p>
<p><code>InfoService.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InfoService</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> OnInfoFetchCallback callback;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InfoService</span><span class="params">(OnInfoFetchCallback callback)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.callback = callback;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 模拟一个耗时操作</span></div><div class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Thread.sleep(<span class="number">3000</span>);</div><div class="line">                    <span class="comment">// 信息获取成功，传递结果</span></div><div class="line">                    callback.onSuccess(<span class="string">"结果是："</span> + <span class="keyword">new</span> Date());</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    <span class="comment">// 信息获取失败</span></div><div class="line">                    callback.failure();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        thread.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在<code>MainActivity</code>中调用<code>InfoService</code>中的<code>getInfo()</code>方法执行耗时操作。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">OnInfoFetchCallback</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MainActivity"</span>;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取信息</div><div class="line">     * <span class="doctag">@param</span> view</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fetchInfo</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        InfoService service = <span class="keyword">new</span> InfoService(<span class="keyword">this</span>);</div><div class="line">        service.getInfo();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(String info)</span> </span>&#123;</div><div class="line">        Log.i(TAG, info);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">failure</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.i(TAG, <span class="string">"获取信息失败"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于<code>MainActivity</code>已经实现了<code>OnInfoFetchCallback</code> 接口，所以在实例化<code>InfoService</code>对象时，直接将<code>this</code>传入即可。当任务执行结束后，调用<code>MainActivity</code>中的<code>onSuccess(String info)</code>或<code>failure()</code>方法将结果返回。</p>
<p><code>MainActivity</code>也可以不用实现<code>OnInfoFetchCallback</code> 接口，此时可以采用匿名内部类的写法。<br>如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 获取信息</div><div class="line"> * <span class="doctag">@param</span> view</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fetchInfo</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">    InfoService service = <span class="keyword">new</span> InfoService(<span class="keyword">new</span> OnInfoFetchCallback() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(String info)</span> </span>&#123;</div><div class="line">            Log.i(TAG, info);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">failure</span><span class="params">()</span> </span>&#123;</div><div class="line">            Log.i(TAG, <span class="string">"获取信息失败"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    service.getInfo();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>布局文件非常简单，只有一个按钮。</p>
<p><code>activity_main.xml</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"cc.duduhuo.interfacedemo.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"获取信息"</span></div><div class="line">        <span class="attr">android:onClick</span>=<span class="string">"fetchInfo"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Android中接口的三种基本使用方式已经介绍完了，该博文相关代码可通过下方地址下载：</p>
<p><a href="http://download.csdn.net/detail/u012939909/9608555" target="_blank" rel="external">相关源码点击此处下载</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Java中的接口可以被看作是&lt;code&gt;只包含常量和抽象方法的抽象类&lt;/code&gt;  。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 可以使用如下方式定义一个接口：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table
    
    </summary>
    
      <category term="Android基础" scheme="/categories/Android%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Android" scheme="/tags/Android/"/>
    
      <category term="接口" scheme="/tags/%E6%8E%A5%E5%8F%A3/"/>
    
      <category term="Java" scheme="/tags/Java/"/>
    
  </entry>
  
</feed>
